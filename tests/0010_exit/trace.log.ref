# ---  trace  ---
IP: #209:0x0, type 5, 1[7]
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.1.mem.ro, ip 0x8 (0x0), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
IP: #209:0x8, type 9, 9[3]
GC: ++#209.1.1.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.2.mem.ro, ip 0xc (0x8), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #212.1.1.mem.ref.ro <#209.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #209:0xc, type 6, 14[38]
GC: ++#209.1.2.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x34 (0xc), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #213.1.1.mem.code.ro <#209.1.3.mem.ro, ofs 0xe, size 38>
  [1] #212.1.1.mem.ref.ro <#209.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #209:0x34, type 8, 53[3]
GC: ++#212.1.1.mem.ref.ro
GC: ++#213.1.1.mem.code.ro
GC: --#213.1.2.mem.code.ro
GC: --#212.1.2.mem.ref.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x38 (0x34), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
IP: #209:0x38, type 6, 58[21]
GC: ++#209.1.3.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x4f (0x38), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #214.1.1.mem.code.ro <#209.1.4.mem.ro, ofs 0x3a, size 21>
IP: #209:0x4f, type 8, 80[4]
GC: ++#214.1.1.mem.code.ro
GC: --#214.1.2.mem.code.ro
== backtrace ==
  [0] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
IP: #214:0x0, type 2, 1 (0x1)
== backtrace ==
  [0] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x1 (0x0)>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #216.1.1.num.bool <1 (0x1)>
IP: #214:0x1, type 6, 3[14]
GC: ++#209.1.4.mem.ro
== backtrace ==
  [0] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x11 (0x1)>
  [1] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #217.1.1.mem.code.ro <#209.1.5.mem.ro, ofs 0x3d, size 14>
  [1] #216.1.1.num.bool <1 (0x1)>
IP: #214:0x11, type 8, 18[2]
GC: ++#217.1.1.mem.code.ro
GC: --#217.1.2.mem.code.ro
GC: --#216.1.1.num.bool
== backtrace ==
  [0] #218.1.1.ctx.block <code #217.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x14 (0x11)>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
IP: #217:0x0, type 1, 10 (0xa)
== backtrace ==
  [0] #218.1.1.ctx.block <code #217.1.1.mem.code.ro, ip 0x2 (0x0)>
  [1] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x14 (0x11)>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #220.1.1.num.int <10 (0xa)>
IP: #217:0x2, type 1, 20 (0x14)
== backtrace ==
  [0] #218.1.1.ctx.block <code #217.1.1.mem.code.ro, ip 0x4 (0x2)>
  [1] #215.1.1.ctx.loop <code #214.1.1.mem.code.ro, ip 0x14 (0x11)>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #221.1.1.num.int <20 (0x14)>
  [1] #220.1.1.num.int <10 (0xa)>
IP: #217:0x4, type 8, 5[4]
GC: ++#211.1.1.ctx.func
GC: --#218.1.1.ctx.block
GC: --#215.1.1.ctx.loop
GC: --#217.1.1.mem.code.ro
GC: --#211.1.2.ctx.func
GC: --#214.1.1.mem.code.ro
GC: --#209.1.5.mem.ro
GC: --#209.1.4.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x54 (0x4f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #221.1.1.num.int <20 (0x14)>
  [1] #220.1.1.num.int <10 (0xa)>
IP: #209:0x54, type 1, 2 (0x2)
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x55 (0x54), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #222.1.1.num.int <2 (0x2)>
  [1] #221.1.1.num.int <20 (0x14)>
  [2] #220.1.1.num.int <10 (0xa)>
IP: #209:0x55, type 6, 87[24]
GC: ++#209.1.3.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x6f (0x55), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #223.1.1.mem.code.ro <#209.1.4.mem.ro, ofs 0x57, size 24>
  [1] #222.1.1.num.int <2 (0x2)>
  [2] #221.1.1.num.int <20 (0x14)>
  [3] #220.1.1.num.int <10 (0xa)>
IP: #209:0x6f, type 8, 112[6]
GC: ++#223.1.1.mem.code.ro
GC: --#223.1.2.mem.code.ro
GC: --#222.1.1.num.int
== backtrace ==
  [0] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x0 (0x0), index 2>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #221.1.1.num.int <20 (0x14)>
  [1] #220.1.1.num.int <10 (0xa)>
IP: #223:0x0, type 2, 1 (0x1)
== backtrace ==
  [0] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x1 (0x0), index 2>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #225.1.1.num.bool <1 (0x1)>
  [1] #221.1.1.num.int <20 (0x14)>
  [2] #220.1.1.num.int <10 (0xa)>
IP: #223:0x1, type 6, 3[17]
GC: ++#209.1.4.mem.ro
== backtrace ==
  [0] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x14 (0x1), index 2>
  [1] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #226.1.1.mem.code.ro <#209.1.5.mem.ro, ofs 0x5a, size 17>
  [1] #225.1.1.num.bool <1 (0x1)>
  [2] #221.1.1.num.int <20 (0x14)>
  [3] #220.1.1.num.int <10 (0xa)>
IP: #223:0x14, type 8, 21[2]
GC: ++#226.1.1.mem.code.ro
GC: --#226.1.2.mem.code.ro
GC: --#225.1.1.num.bool
== backtrace ==
  [0] #227.1.1.ctx.block <code #226.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x17 (0x14), index 2>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #221.1.1.num.int <20 (0x14)>
  [1] #220.1.1.num.int <10 (0xa)>
IP: #226:0x0, type 1, 100 (0x64)
== backtrace ==
  [0] #227.1.1.ctx.block <code #226.1.1.mem.code.ro, ip 0x2 (0x0)>
  [1] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x17 (0x14), index 2>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #228.1.1.num.int <100 (0x64)>
  [1] #221.1.1.num.int <20 (0x14)>
  [2] #220.1.1.num.int <10 (0xa)>
IP: #226:0x2, type 1, 200 (0xc8)
== backtrace ==
  [0] #227.1.1.ctx.block <code #226.1.1.mem.code.ro, ip 0x5 (0x2)>
  [1] #224.1.1.ctx.repeat <code #223.1.1.mem.code.ro, ip 0x17 (0x14), index 2>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #229.1.1.num.int <200 (0xc8)>
  [1] #228.1.1.num.int <100 (0x64)>
  [2] #221.1.1.num.int <20 (0x14)>
  [3] #220.1.1.num.int <10 (0xa)>
IP: #226:0x5, type 8, 6[4]
GC: ++#211.1.1.ctx.func
GC: --#227.1.1.ctx.block
GC: --#224.1.1.ctx.repeat
GC: --#226.1.1.mem.code.ro
GC: --#211.1.2.ctx.func
GC: --#223.1.1.mem.code.ro
GC: --#209.1.5.mem.ro
GC: --#209.1.4.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x76 (0x6f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #229.1.1.num.int <200 (0xc8)>
  [1] #228.1.1.num.int <100 (0x64)>
  [2] #221.1.1.num.int <20 (0x14)>
  [3] #220.1.1.num.int <10 (0xa)>
IP: #209:0x76, type 1, 1000 (0x3e8)
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x79 (0x76), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #209:0x79, type 1, 2000 (0x7d0)
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x7c (0x79), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #231.1.1.num.int <2000 (0x7d0)>
  [1] #230.1.1.num.int <1000 (0x3e8)>
  [2] #229.1.1.num.int <200 (0xc8)>
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #221.1.1.num.int <20 (0x14)>
  [5] #220.1.1.num.int <10 (0xa)>
IP: #209:0x7c, type 1, 5000 (0x1388)
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x7f (0x7c), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #232.1.1.num.int <5000 (0x1388)>
  [1] #231.1.1.num.int <2000 (0x7d0)>
  [2] #230.1.1.num.int <1000 (0x3e8)>
  [3] #229.1.1.num.int <200 (0xc8)>
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #221.1.1.num.int <20 (0x14)>
  [6] #220.1.1.num.int <10 (0xa)>
IP: #209:0x7f, type 6, 129[12]
GC: ++#209.1.3.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x8d (0x7f), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #233.1.1.mem.code.ro <#209.1.4.mem.ro, ofs 0x81, size 12>
  [1] #232.1.1.num.int <5000 (0x1388)>
  [2] #231.1.1.num.int <2000 (0x7d0)>
  [3] #230.1.1.num.int <1000 (0x3e8)>
  [4] #229.1.1.num.int <200 (0xc8)>
  [5] #228.1.1.num.int <100 (0x64)>
  [6] #221.1.1.num.int <20 (0x14)>
  [7] #220.1.1.num.int <10 (0xa)>
IP: #209:0x8d, type 8, 142[3]
GC: ++#233.1.1.mem.code.ro
GC: --#233.1.2.mem.code.ro
GC: --#232.1.1.num.int
GC: --#231.1.1.num.int
== backtrace ==
  [0] #234.1.1.ctx.for <code #233.1.1.mem.code.ro, ip 0x0 (0x0), index 1000, inc 2000, max 5000>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #233:0x0, type 2, 1 (0x1)
== backtrace ==
  [0] #234.1.1.ctx.for <code #233.1.1.mem.code.ro, ip 0x1 (0x0), index 1000, inc 2000, max 5000>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #235.1.1.num.bool <1 (0x1)>
  [1] #230.1.1.num.int <1000 (0x3e8)>
  [2] #229.1.1.num.int <200 (0xc8)>
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #221.1.1.num.int <20 (0x14)>
  [5] #220.1.1.num.int <10 (0xa)>
IP: #233:0x1, type 6, 2[6]
GC: ++#209.1.4.mem.ro
== backtrace ==
  [0] #234.1.1.ctx.for <code #233.1.1.mem.code.ro, ip 0x8 (0x1), index 1000, inc 2000, max 5000>
  [1] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #236.1.1.mem.code.ro <#209.1.5.mem.ro, ofs 0x83, size 6>
  [1] #235.1.1.num.bool <1 (0x1)>
  [2] #230.1.1.num.int <1000 (0x3e8)>
  [3] #229.1.1.num.int <200 (0xc8)>
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #221.1.1.num.int <20 (0x14)>
  [6] #220.1.1.num.int <10 (0xa)>
IP: #233:0x8, type 8, 9[2]
GC: ++#236.1.1.mem.code.ro
GC: --#236.1.2.mem.code.ro
GC: --#235.1.1.num.bool
== backtrace ==
  [0] #237.1.1.ctx.block <code #236.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #234.1.1.ctx.for <code #233.1.1.mem.code.ro, ip 0xb (0x8), index 1000, inc 2000, max 5000>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #236:0x0, type 8, 1[4]
GC: ++#211.1.1.ctx.func
GC: --#237.1.1.ctx.block
GC: --#234.1.1.ctx.for
GC: --#236.1.1.mem.code.ro
GC: --#211.1.2.ctx.func
GC: --#233.1.1.mem.code.ro
GC: --#209.1.5.mem.ro
GC: --#209.1.4.mem.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #209:0x91, type 8, 146[3]
GC: ++#213.1.1.mem.code.ro
== backtrace ==
  [0] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x0 (0x0)>
  [1] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #213:0x0, type 6, 2[26]
GC: ++#209.1.3.mem.ro
== backtrace ==
  [0] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x1c (0x0)>
  [1] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #239.1.1.mem.code.ro <#209.1.4.mem.ro, ofs 0x10, size 26>
  [1] #230.1.1.num.int <1000 (0x3e8)>
  [2] #229.1.1.num.int <200 (0xc8)>
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #221.1.1.num.int <20 (0x14)>
  [5] #220.1.1.num.int <10 (0xa)>
IP: #213:0x1c, type 8, 29[4]
GC: ++#239.1.1.mem.code.ro
GC: --#239.1.2.mem.code.ro
== backtrace ==
  [0] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [2] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #239:0x0, type 2, 1 (0x1)
== backtrace ==
  [0] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x1 (0x0)>
  [1] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [2] #211.1.1.ctx.func <code #209.1.4.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #241.1.1.num.bool <1 (0x1)>
  [1] #230.1.1.num.int <1000 (0x3e8)>
  [2] #229.1.1.num.int <200 (0xc8)>
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #221.1.1.num.int <20 (0x14)>
  [5] #220.1.1.num.int <10 (0xa)>
IP: #239:0x1, type 6, 3[19]
GC: ++#209.1.4.mem.ro
== backtrace ==
  [0] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x16 (0x1)>
  [1] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [2] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #242.1.1.mem.code.ro <#209.1.5.mem.ro, ofs 0x13, size 19>
  [1] #241.1.1.num.bool <1 (0x1)>
  [2] #230.1.1.num.int <1000 (0x3e8)>
  [3] #229.1.1.num.int <200 (0xc8)>
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #221.1.1.num.int <20 (0x14)>
  [6] #220.1.1.num.int <10 (0xa)>
IP: #239:0x16, type 8, 23[2]
GC: ++#242.1.1.mem.code.ro
GC: --#242.1.2.mem.code.ro
GC: --#241.1.1.num.bool
== backtrace ==
  [0] #243.1.1.ctx.block <code #242.1.1.mem.code.ro, ip 0x0 (0x0)>
  [1] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x19 (0x16)>
  [2] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [3] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #230.1.1.num.int <1000 (0x3e8)>
  [1] #229.1.1.num.int <200 (0xc8)>
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #221.1.1.num.int <20 (0x14)>
  [4] #220.1.1.num.int <10 (0xa)>
IP: #242:0x0, type 1, 10000 (0x2710)
== backtrace ==
  [0] #243.1.1.ctx.block <code #242.1.1.mem.code.ro, ip 0x3 (0x0)>
  [1] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x19 (0x16)>
  [2] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [3] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #244.1.1.num.int <10000 (0x2710)>
  [1] #230.1.1.num.int <1000 (0x3e8)>
  [2] #229.1.1.num.int <200 (0xc8)>
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #221.1.1.num.int <20 (0x14)>
  [5] #220.1.1.num.int <10 (0xa)>
IP: #242:0x3, type 1, 20000 (0x4e20)
== backtrace ==
  [0] #243.1.1.ctx.block <code #242.1.1.mem.code.ro, ip 0x6 (0x3)>
  [1] #240.1.1.ctx.loop <code #239.1.1.mem.code.ro, ip 0x19 (0x16)>
  [2] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [3] #211.1.1.ctx.func <code #209.1.5.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #245.1.1.num.int <20000 (0x4e20)>
  [1] #244.1.1.num.int <10000 (0x2710)>
  [2] #230.1.1.num.int <1000 (0x3e8)>
  [3] #229.1.1.num.int <200 (0xc8)>
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #221.1.1.num.int <20 (0x14)>
  [6] #220.1.1.num.int <10 (0xa)>
IP: #242:0x6, type 8, 7[4]
GC: ++#238.1.1.ctx.func
GC: --#243.1.1.ctx.block
GC: --#240.1.1.ctx.loop
GC: --#242.1.1.mem.code.ro
GC: --#238.1.2.ctx.func
GC: --#239.1.1.mem.code.ro
GC: --#209.1.5.mem.ro
GC: --#209.1.4.mem.ro
== backtrace ==
  [0] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x21 (0x1c)>
  [1] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #245.1.1.num.int <20000 (0x4e20)>
  [1] #244.1.1.num.int <10000 (0x2710)>
  [2] #230.1.1.num.int <1000 (0x3e8)>
  [3] #229.1.1.num.int <200 (0xc8)>
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #221.1.1.num.int <20 (0x14)>
  [6] #220.1.1.num.int <10 (0xa)>
IP: #213:0x21, type 1, 50000 (0xc350)
== backtrace ==
  [0] #238.1.1.ctx.func <code #213.1.2.mem.code.ro, ip 0x25 (0x21)>
  [1] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #246.1.1.num.int <50000 (0xc350)>
  [1] #245.1.1.num.int <20000 (0x4e20)>
  [2] #244.1.1.num.int <10000 (0x2710)>
  [3] #230.1.1.num.int <1000 (0x3e8)>
  [4] #229.1.1.num.int <200 (0xc8)>
  [5] #228.1.1.num.int <100 (0x64)>
  [6] #221.1.1.num.int <20 (0x14)>
  [7] #220.1.1.num.int <10 (0xa)>
IP: #213:0x25, type 3, 1 (0x1)
GC: ++#211.1.1.ctx.func
GC: --#238.1.1.ctx.func
GC: --#211.1.2.ctx.func
GC: --#213.1.2.mem.code.ro
== backtrace ==
  [0] #211.1.1.ctx.func <code #209.1.3.mem.ro, ip 0x95 (0x91), dict #8.1.2.hash>
== stack (#210.1.1.array) ==
  [0] #246.1.1.num.int <50000 (0xc350)>
  [1] #245.1.1.num.int <20000 (0x4e20)>
  [2] #244.1.1.num.int <10000 (0x2710)>
  [3] #230.1.1.num.int <1000 (0x3e8)>
  [4] #229.1.1.num.int <200 (0xc8)>
  [5] #228.1.1.num.int <100 (0x64)>
  [6] #221.1.1.num.int <20 (0x14)>
  [7] #220.1.1.num.int <10 (0xa)>
