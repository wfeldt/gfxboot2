# ---  trace  ---
IP: #188:0x0, type 5, 1[7]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x8, type 9, 9[5]
GC: ++#188.1.1.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0xe (0x8), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0xe, type 8, 15[1]
GC: ++#9.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x10 (0xe), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #9.1.2.num.prim <2 (0x2)>
  [1] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x10, type 1, 10 (0xa)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x12 (0x10), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #192.1.1.num.int <10 (0xa)>
  [1] #9.1.2.num.prim <2 (0x2)>
  [2] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x12, type 1, 20 (0x14)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x14 (0x12), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.1.num.int <20 (0x14)>
  [1] #192.1.1.num.int <10 (0xa)>
  [2] #9.1.2.num.prim <2 (0x2)>
  [3] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x14, type 1, 30 (0x1e)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x16 (0x14), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #194.1.1.num.int <30 (0x1e)>
  [1] #193.1.1.num.int <20 (0x14)>
  [2] #192.1.1.num.int <10 (0xa)>
  [3] #9.1.2.num.prim <2 (0x2)>
  [4] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x16, type 1, 40 (0x28)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x18 (0x16), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #195.1.1.num.int <40 (0x28)>
  [1] #194.1.1.num.int <30 (0x1e)>
  [2] #193.1.1.num.int <20 (0x14)>
  [3] #192.1.1.num.int <10 (0xa)>
  [4] #9.1.2.num.prim <2 (0x2)>
  [5] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x18, type 8, 25[1]
GC: --#9.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x1a (0x18), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #196.1.1.array <size 4, max 4>
  [1] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 5, "foo_1">
IP: #188:0x1a, type 8, 27[3]
GC: ++#191.1.1.mem.ref.ro
GC: ++#196.1.1.array
GC: --#196.1.2.array
GC: --#191.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x1e (0x1a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x1e, type 9, 31[5]
GC: ++#188.1.2.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x24 (0x1e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x24, type 8, 37[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x26 (0x24), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #197.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x26, type 7, 39[2]
GC: ++#188.1.3.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x29 (0x26), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #198.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x27, size 2, "aa">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #197.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x29, type 1, 11 (0xb)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x2b (0x29), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #199.1.1.num.int <11 (0xb)>
  [1] #198.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x27, size 2, "aa">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #197.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x2b, type 7, 44[2]
GC: ++#188.1.4.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x2e (0x2b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #200.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x2c, size 2, "bb">
  [1] #199.1.1.num.int <11 (0xb)>
  [2] #198.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x27, size 2, "aa">
  [3] #13.1.2.num.prim <4 (0x4)>
  [4] #197.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x2e, type 1, 22 (0x16)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x30 (0x2e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #201.1.1.num.int <22 (0x16)>
  [1] #200.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x2c, size 2, "bb">
  [2] #199.1.1.num.int <11 (0xb)>
  [3] #198.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x27, size 2, "aa">
  [4] #13.1.2.num.prim <4 (0x4)>
  [5] #197.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x30, type 7, 49[2]
GC: ++#188.1.5.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x33 (0x30), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #202.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x31, size 2, "cc">
  [1] #201.1.1.num.int <22 (0x16)>
  [2] #200.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x2c, size 2, "bb">
  [3] #199.1.1.num.int <11 (0xb)>
  [4] #198.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x27, size 2, "aa">
  [5] #13.1.2.num.prim <4 (0x4)>
  [6] #197.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x33, type 1, 33 (0x21)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x35 (0x33), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #203.1.1.num.int <33 (0x21)>
  [1] #202.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x31, size 2, "cc">
  [2] #201.1.1.num.int <22 (0x16)>
  [3] #200.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x2c, size 2, "bb">
  [4] #199.1.1.num.int <11 (0xb)>
  [5] #198.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x27, size 2, "aa">
  [6] #13.1.2.num.prim <4 (0x4)>
  [7] #197.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x35, type 7, 54[2]
GC: ++#188.1.6.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x38 (0x35), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x36, size 2, "dd">
  [1] #203.1.1.num.int <33 (0x21)>
  [2] #202.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x31, size 2, "cc">
  [3] #201.1.1.num.int <22 (0x16)>
  [4] #200.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x2c, size 2, "bb">
  [5] #199.1.1.num.int <11 (0xb)>
  [6] #198.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x27, size 2, "aa">
  [7] #13.1.2.num.prim <4 (0x4)>
  [8] #197.1.1.mem.ref.ro <#188.1.7.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x38, type 1, 44 (0x2c)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x3a (0x38), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #205.1.1.num.int <44 (0x2c)>
  [1] #204.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x36, size 2, "dd">
  [2] #203.1.1.num.int <33 (0x21)>
  [3] #202.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x31, size 2, "cc">
  [4] #201.1.1.num.int <22 (0x16)>
  [5] #200.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x2c, size 2, "bb">
  [6] #199.1.1.num.int <11 (0xb)>
  [7] #198.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x27, size 2, "aa">
  [8] #13.1.2.num.prim <4 (0x4)>
  [9] #197.1.1.mem.ref.ro <#188.1.7.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x3a, type 8, 59[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x3c (0x3a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.1.hash <size 4, max 4>
  [1] #197.1.1.mem.ref.ro <#188.1.7.mem.ro, ofs 0x1f, size 5, "foo_2">
IP: #188:0x3c, type 8, 61[3]
GC: ++#197.1.1.mem.ref.ro
GC: ++#206.1.1.hash
GC: --#206.1.2.hash
GC: --#197.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x40 (0x3c), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x40, type 9, 65[5]
GC: ++#188.1.7.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x46 (0x40), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #207.1.1.mem.ref.ro <#188.1.8.mem.ro, ofs 0x41, size 5, "foo_3">
IP: #188:0x46, type 7, 71[6]
GC: ++#188.1.8.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x4d (0x46), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #208.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x47, size 6, "ABC123">
  [1] #207.1.1.mem.ref.ro <#188.1.9.mem.ro, ofs 0x41, size 5, "foo_3">
IP: #188:0x4d, type 8, 78[3]
GC: ++#207.1.1.mem.ref.ro
GC: ++#208.1.1.mem.str.ro
GC: --#208.1.2.mem.str.ro
GC: --#207.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x51 (0x4d), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x51, type 8, 82[5]
GC: ++#206.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x57 (0x51), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.2.hash <size 4, max 4>
IP: #188:0x57, type 7, 88[2]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x5a (0x57), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #209.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x58, size 2, "bb">
  [1] #206.1.2.hash <size 4, max 4>
IP: #188:0x5a, type 8, 91[6]
GC: --#200.1.1.mem.str.ro
GC: --#188.1.10.mem.ro
GC: --#201.1.1.num.int
GC: --#209.1.1.mem.str.ro
GC: --#188.1.9.mem.ro
GC: --#206.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x61 (0x5a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x61, type 8, 98[5]
GC: ++#196.1.1.array
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x67 (0x61), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #196.1.2.array <size 4, max 4>
IP: #188:0x67, type 8, 104[6]
GC: --#196.1.2.array
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x6e (0x67), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #211.1.1.num.int <4 (0x4)>
IP: #188:0x6e, type 8, 111[5]
GC: ++#206.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x74 (0x6e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.2.hash <size 3, max 4>
  [1] #211.1.1.num.int <4 (0x4)>
IP: #188:0x74, type 8, 117[6]
GC: --#206.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x7b (0x74), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #212.1.1.num.int <3 (0x3)>
  [1] #211.1.1.num.int <4 (0x4)>
IP: #188:0x7b, type 8, 124[5]
GC: ++#208.1.1.mem.str.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x81 (0x7b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #208.1.2.mem.str.ro <#188.1.8.mem.ro, ofs 0x47, size 6, "ABC123">
  [1] #212.1.1.num.int <3 (0x3)>
  [2] #211.1.1.num.int <4 (0x4)>
IP: #188:0x81, type 8, 130[6]
GC: --#208.1.2.mem.str.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x88 (0x81), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <6 (0x6)>
  [1] #212.1.1.num.int <3 (0x3)>
  [2] #211.1.1.num.int <4 (0x4)>
