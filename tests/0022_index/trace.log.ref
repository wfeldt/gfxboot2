# ---  trace  ---
IP: #186:0x0, type 5, 1[7]
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x8, type 1, 100 (0x64)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0xa (0x8), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #189.1.1.num.int <100 (0x64)>
IP: #186:0xa, type 1, 200 (0xc8)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0xd (0xa), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #190.1.1.num.int <200 (0xc8)>
  [1] #189.1.1.num.int <100 (0x64)>
IP: #186:0xd, type 1, 300 (0x12c)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x10 (0xd), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.1.num.int <300 (0x12c)>
  [1] #190.1.1.num.int <200 (0xc8)>
  [2] #189.1.1.num.int <100 (0x64)>
IP: #186:0x10, type 1, 400 (0x190)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x13 (0x10), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #192.1.1.num.int <400 (0x190)>
  [1] #191.1.1.num.int <300 (0x12c)>
  [2] #190.1.1.num.int <200 (0xc8)>
  [3] #189.1.1.num.int <100 (0x64)>
IP: #186:0x13, type 1, 500 (0x1f4)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x16 (0x13), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #193.1.1.num.int <500 (0x1f4)>
  [1] #192.1.1.num.int <400 (0x190)>
  [2] #191.1.1.num.int <300 (0x12c)>
  [3] #190.1.1.num.int <200 (0xc8)>
  [4] #189.1.1.num.int <100 (0x64)>
IP: #186:0x16, type 1, 0 (0x0)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x17 (0x16), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.1.num.int <0 (0x0)>
  [1] #193.1.1.num.int <500 (0x1f4)>
  [2] #192.1.1.num.int <400 (0x190)>
  [3] #191.1.1.num.int <300 (0x12c)>
  [4] #190.1.1.num.int <200 (0xc8)>
  [5] #189.1.1.num.int <100 (0x64)>
IP: #186:0x17, type 8, 24[5]
GC: --#194.1.1.num.int
GC: ++#193.1.1.num.int
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x1d (0x17), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #193.1.2.num.int <500 (0x1f4)>
  [1] #193.1.2.num.int <500 (0x1f4)>
  [2] #192.1.1.num.int <400 (0x190)>
  [3] #191.1.1.num.int <300 (0x12c)>
  [4] #190.1.1.num.int <200 (0xc8)>
  [5] #189.1.1.num.int <100 (0x64)>
IP: #186:0x1d, type 1, 2 (0x2)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x1e (0x1d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #196.1.1.num.int <2 (0x2)>
  [1] #193.1.2.num.int <500 (0x1f4)>
  [2] #193.1.2.num.int <500 (0x1f4)>
  [3] #192.1.1.num.int <400 (0x190)>
  [4] #191.1.1.num.int <300 (0x12c)>
  [5] #190.1.1.num.int <200 (0xc8)>
  [6] #189.1.1.num.int <100 (0x64)>
IP: #186:0x1e, type 8, 31[5]
GC: --#196.1.1.num.int
GC: ++#192.1.1.num.int
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x24 (0x1e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #192.1.2.num.int <400 (0x190)>
  [1] #193.1.2.num.int <500 (0x1f4)>
  [2] #193.1.2.num.int <500 (0x1f4)>
  [3] #192.1.2.num.int <400 (0x190)>
  [4] #191.1.1.num.int <300 (0x12c)>
  [5] #190.1.1.num.int <200 (0xc8)>
  [6] #189.1.1.num.int <100 (0x64)>
IP: #186:0x24, type 1, 6 (0x6)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x25 (0x24), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #197.1.1.num.int <6 (0x6)>
  [1] #192.1.2.num.int <400 (0x190)>
  [2] #193.1.2.num.int <500 (0x1f4)>
  [3] #193.1.2.num.int <500 (0x1f4)>
  [4] #192.1.2.num.int <400 (0x190)>
  [5] #191.1.1.num.int <300 (0x12c)>
  [6] #190.1.1.num.int <200 (0xc8)>
  [7] #189.1.1.num.int <100 (0x64)>
IP: #186:0x25, type 8, 38[5]
GC: --#197.1.1.num.int
GC: ++#189.1.1.num.int
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x2b (0x25), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #189.1.2.num.int <100 (0x64)>
  [1] #192.1.2.num.int <400 (0x190)>
  [2] #193.1.2.num.int <500 (0x1f4)>
  [3] #193.1.2.num.int <500 (0x1f4)>
  [4] #192.1.2.num.int <400 (0x190)>
  [5] #191.1.1.num.int <300 (0x12c)>
  [6] #190.1.1.num.int <200 (0xc8)>
  [7] #189.1.2.num.int <100 (0x64)>
