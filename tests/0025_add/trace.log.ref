# ---  trace  ---
IP: #205:0x0, type 5, 1[7]
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x8 (0x0), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
IP: #205:0x8, type 1, 1000 (0x3e8)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0xb (0x8), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #208.1.1.num.int <1000 (0x3e8)>
IP: #205:0xb, type 1, 2000 (0x7d0)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0xe (0xb), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #209.1.1.num.int <2000 (0x7d0)>
  [1] #208.1.1.num.int <1000 (0x3e8)>
IP: #205:0xe, type 8, 15[3]
GC: --#209.1.1.num.int
GC: --#208.1.1.num.int
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x12 (0xe), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x12, type 2, 1 (0x1)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x13 (0x12), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #212.1.1.num.bool <1 (0x1)>
  [1] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x13, type 2, 0 (0x0)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x14 (0x13), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #213.1.1.num.bool <0 (0x0)>
  [1] #212.1.1.num.bool <1 (0x1)>
  [2] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x14, type 8, 21[3]
GC: --#213.1.1.num.bool
GC: --#212.1.1.num.bool
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x18 (0x14), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #214.1.1.num.bool <1 (0x1)>
  [1] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x18, type 2, 1 (0x1)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x19 (0x18), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #215.1.1.num.bool <1 (0x1)>
  [1] #214.1.1.num.bool <1 (0x1)>
  [2] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x19, type 1, 9 (0x9)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x1b (0x19), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #216.1.1.num.int <9 (0x9)>
  [1] #215.1.1.num.bool <1 (0x1)>
  [2] #214.1.1.num.bool <1 (0x1)>
  [3] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x1b, type 8, 28[3]
GC: --#216.1.1.num.int
GC: --#215.1.1.num.bool
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x1f (0x1b), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #217.1.1.num.bool <0 (0x0)>
  [1] #214.1.1.num.bool <1 (0x1)>
  [2] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x1f, type 9, 32[5]
GC: ++#205.1.1.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x25 (0x1f), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [1] #217.1.1.num.bool <0 (0x0)>
  [2] #214.1.1.num.bool <1 (0x1)>
  [3] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x25, type 8, 38[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x27 (0x25), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #13.1.2.num.prim <2 (0x2)>
  [1] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x27, type 1, 10 (0xa)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x29 (0x27), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #219.1.1.num.int <10 (0xa)>
  [1] #13.1.2.num.prim <2 (0x2)>
  [2] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x29, type 0, 0 (0x0)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x2a (0x29), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #219.1.1.num.int <10 (0xa)>
  [2] #13.1.2.num.prim <2 (0x2)>
  [3] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [4] #217.1.1.num.bool <0 (0x0)>
  [5] #214.1.1.num.bool <1 (0x1)>
  [6] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x2a, type 1, 30 (0x1e)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x2c (0x2a), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #220.1.1.num.int <30 (0x1e)>
  [1] #0.0.nil <nil>
  [2] #219.1.1.num.int <10 (0xa)>
  [3] #13.1.2.num.prim <2 (0x2)>
  [4] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x2c, type 8, 45[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x2e (0x2c), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #221.1.1.array <size 3, max 3>
  [1] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x2e, type 8, 47[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x30 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #13.1.2.num.prim <2 (0x2)>
  [1] #221.1.1.array <size 3, max 3>
  [2] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x30, type 1, 40 (0x28)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x32 (0x30), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #222.1.1.num.int <40 (0x28)>
  [1] #13.1.2.num.prim <2 (0x2)>
  [2] #221.1.1.array <size 3, max 3>
  [3] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [4] #217.1.1.num.bool <0 (0x0)>
  [5] #214.1.1.num.bool <1 (0x1)>
  [6] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x32, type 1, 50 (0x32)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x34 (0x32), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #223.1.1.num.int <50 (0x32)>
  [1] #222.1.1.num.int <40 (0x28)>
  [2] #13.1.2.num.prim <2 (0x2)>
  [3] #221.1.1.array <size 3, max 3>
  [4] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x34, type 8, 53[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x36 (0x34), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #224.1.1.array <size 2, max 2>
  [1] #221.1.1.array <size 3, max 3>
  [2] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x36, type 8, 55[3]
GC: ++#219.1.1.num.int
GC: ++#220.1.1.num.int
GC: ++#222.1.1.num.int
GC: ++#223.1.1.num.int
GC: --#224.1.1.array
GC: --#222.1.2.num.int
GC: --#223.1.2.num.int
GC: --#221.1.1.array
GC: --#219.1.2.num.int
GC: --#220.1.2.num.int
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x3a (0x36), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #225.1.1.array <size 5, max 21>
  [1] #218.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x20, size 5, "foo_1">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x3a, type 8, 59[3]
GC: ++#218.1.1.mem.ref.ro
GC: ++#225.1.1.array
GC: --#225.1.2.array
GC: --#218.1.2.mem.ref.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0x3e (0x3a), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #217.1.1.num.bool <0 (0x0)>
  [1] #214.1.1.num.bool <1 (0x1)>
  [2] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x3e, type 9, 63[5]
GC: ++#205.1.2.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.3.mem.ro, ip 0x44 (0x3e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #226.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0x3f, size 5, "foo_2">
  [1] #217.1.1.num.bool <0 (0x0)>
  [2] #214.1.1.num.bool <1 (0x1)>
  [3] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x44, type 8, 69[1]
GC: ++#17.1.1.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.3.mem.ro, ip 0x46 (0x44), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #17.1.2.num.prim <4 (0x4)>
  [1] #226.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0x3f, size 5, "foo_2">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x46, type 7, 71[2]
GC: ++#205.1.3.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.4.mem.ro, ip 0x49 (0x46), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #227.1.1.mem.str.ro <#205.1.4.mem.ro, ofs 0x47, size 2, "aa">
  [1] #17.1.2.num.prim <4 (0x4)>
  [2] #226.1.1.mem.ref.ro <#205.1.4.mem.ro, ofs 0x3f, size 5, "foo_2">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x49, type 1, 100 (0x64)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.4.mem.ro, ip 0x4b (0x49), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #228.1.1.num.int <100 (0x64)>
  [1] #227.1.1.mem.str.ro <#205.1.4.mem.ro, ofs 0x47, size 2, "aa">
  [2] #17.1.2.num.prim <4 (0x4)>
  [3] #226.1.1.mem.ref.ro <#205.1.4.mem.ro, ofs 0x3f, size 5, "foo_2">
  [4] #217.1.1.num.bool <0 (0x0)>
  [5] #214.1.1.num.bool <1 (0x1)>
  [6] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x4b, type 7, 76[2]
GC: ++#205.1.4.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x4e (0x4b), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #229.1.1.mem.str.ro <#205.1.5.mem.ro, ofs 0x4c, size 2, "ee">
  [1] #228.1.1.num.int <100 (0x64)>
  [2] #227.1.1.mem.str.ro <#205.1.5.mem.ro, ofs 0x47, size 2, "aa">
  [3] #17.1.2.num.prim <4 (0x4)>
  [4] #226.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0x3f, size 5, "foo_2">
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x4e, type 0, 0 (0x0)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x4f (0x4e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #229.1.1.mem.str.ro <#205.1.5.mem.ro, ofs 0x4c, size 2, "ee">
  [2] #228.1.1.num.int <100 (0x64)>
  [3] #227.1.1.mem.str.ro <#205.1.5.mem.ro, ofs 0x47, size 2, "aa">
  [4] #17.1.2.num.prim <4 (0x4)>
  [5] #226.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0x3f, size 5, "foo_2">
  [6] #217.1.1.num.bool <0 (0x0)>
  [7] #214.1.1.num.bool <1 (0x1)>
  [8] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x4f, type 7, 80[2]
GC: ++#205.1.5.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.6.mem.ro, ip 0x52 (0x4f), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #230.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x50, size 2, "dd">
  [1] #0.0.nil <nil>
  [2] #229.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x4c, size 2, "ee">
  [3] #228.1.1.num.int <100 (0x64)>
  [4] #227.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x47, size 2, "aa">
  [5] #17.1.2.num.prim <4 (0x4)>
  [6] #226.1.1.mem.ref.ro <#205.1.6.mem.ro, ofs 0x3f, size 5, "foo_2">
  [7] #217.1.1.num.bool <0 (0x0)>
  [8] #214.1.1.num.bool <1 (0x1)>
  [9] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x52, type 1, 400 (0x190)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.6.mem.ro, ip 0x55 (0x52), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #231.1.1.num.int <400 (0x190)>
  [1] #230.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x50, size 2, "dd">
  [2] #0.0.nil <nil>
  [3] #229.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x4c, size 2, "ee">
  [4] #228.1.1.num.int <100 (0x64)>
  [5] #227.1.1.mem.str.ro <#205.1.6.mem.ro, ofs 0x47, size 2, "aa">
  [6] #17.1.2.num.prim <4 (0x4)>
  [7] #226.1.1.mem.ref.ro <#205.1.6.mem.ro, ofs 0x3f, size 5, "foo_2">
  [8] #217.1.1.num.bool <0 (0x0)>
  [9] #214.1.1.num.bool <1 (0x1)>
  [10] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x55, type 8, 86[1]
GC: --#17.1.2.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.6.mem.ro, ip 0x57 (0x55), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #232.1.1.hash <size 3, max 3>
  [1] #226.1.1.mem.ref.ro <#205.1.6.mem.ro, ofs 0x3f, size 5, "foo_2">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x57, type 8, 88[1]
GC: ++#17.1.1.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.6.mem.ro, ip 0x59 (0x57), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #17.1.2.num.prim <4 (0x4)>
  [1] #232.1.1.hash <size 3, max 3>
  [2] #226.1.1.mem.ref.ro <#205.1.6.mem.ro, ofs 0x3f, size 5, "foo_2">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x59, type 7, 90[2]
GC: ++#205.1.6.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.7.mem.ro, ip 0x5c (0x59), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #233.1.1.mem.str.ro <#205.1.7.mem.ro, ofs 0x5a, size 2, "cc">
  [1] #17.1.2.num.prim <4 (0x4)>
  [2] #232.1.1.hash <size 3, max 3>
  [3] #226.1.1.mem.ref.ro <#205.1.7.mem.ro, ofs 0x3f, size 5, "foo_2">
  [4] #217.1.1.num.bool <0 (0x0)>
  [5] #214.1.1.num.bool <1 (0x1)>
  [6] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x5c, type 1, 300 (0x12c)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.7.mem.ro, ip 0x5f (0x5c), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #234.1.1.num.int <300 (0x12c)>
  [1] #233.1.1.mem.str.ro <#205.1.7.mem.ro, ofs 0x5a, size 2, "cc">
  [2] #17.1.2.num.prim <4 (0x4)>
  [3] #232.1.1.hash <size 3, max 3>
  [4] #226.1.1.mem.ref.ro <#205.1.7.mem.ro, ofs 0x3f, size 5, "foo_2">
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x5f, type 7, 96[2]
GC: ++#205.1.7.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x62 (0x5f), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #235.1.1.mem.str.ro <#205.1.8.mem.ro, ofs 0x60, size 2, "bb">
  [1] #234.1.1.num.int <300 (0x12c)>
  [2] #233.1.1.mem.str.ro <#205.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #17.1.2.num.prim <4 (0x4)>
  [4] #232.1.1.hash <size 3, max 3>
  [5] #226.1.1.mem.ref.ro <#205.1.8.mem.ro, ofs 0x3f, size 5, "foo_2">
  [6] #217.1.1.num.bool <0 (0x0)>
  [7] #214.1.1.num.bool <1 (0x1)>
  [8] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x62, type 1, 200 (0xc8)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x65 (0x62), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #236.1.1.num.int <200 (0xc8)>
  [1] #235.1.1.mem.str.ro <#205.1.8.mem.ro, ofs 0x60, size 2, "bb">
  [2] #234.1.1.num.int <300 (0x12c)>
  [3] #233.1.1.mem.str.ro <#205.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #17.1.2.num.prim <4 (0x4)>
  [5] #232.1.1.hash <size 3, max 3>
  [6] #226.1.1.mem.ref.ro <#205.1.8.mem.ro, ofs 0x3f, size 5, "foo_2">
  [7] #217.1.1.num.bool <0 (0x0)>
  [8] #214.1.1.num.bool <1 (0x1)>
  [9] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x65, type 8, 102[1]
GC: --#17.1.2.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x67 (0x65), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #237.1.1.hash <size 2, max 2>
  [1] #232.1.1.hash <size 3, max 3>
  [2] #226.1.1.mem.ref.ro <#205.1.8.mem.ro, ofs 0x3f, size 5, "foo_2">
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x67, type 8, 104[3]
GC: ++#227.1.1.mem.str.ro
GC: ++#228.1.1.num.int
GC: ++#230.1.1.mem.str.ro
GC: ++#231.1.1.num.int
GC: ++#229.1.1.mem.str.ro
GC: ++#235.1.1.mem.str.ro
GC: ++#236.1.1.num.int
GC: ++#233.1.1.mem.str.ro
GC: ++#234.1.1.num.int
GC: --#237.1.1.hash
GC: --#235.1.2.mem.str.ro
GC: --#236.1.2.num.int
GC: --#233.1.2.mem.str.ro
GC: --#234.1.2.num.int
GC: --#232.1.1.hash
GC: --#227.1.2.mem.str.ro
GC: --#228.1.2.num.int
GC: --#230.1.2.mem.str.ro
GC: --#231.1.2.num.int
GC: --#229.1.2.mem.str.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x6b (0x67), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #238.1.1.hash <size 5, max 21>
  [1] #226.1.1.mem.ref.ro <#205.1.8.mem.ro, ofs 0x3f, size 5, "foo_2">
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x6b, type 8, 108[3]
GC: ++#226.1.1.mem.ref.ro
GC: ++#238.1.1.hash
GC: --#238.1.2.hash
GC: --#226.1.2.mem.ref.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x6f (0x6b), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #217.1.1.num.bool <0 (0x0)>
  [1] #214.1.1.num.bool <1 (0x1)>
  [2] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x6f, type 8, 112[5]
GC: ++#225.1.1.array
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x75 (0x6f), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #225.1.2.array <size 5, max 21>
  [1] #217.1.1.num.bool <0 (0x0)>
  [2] #214.1.1.num.bool <1 (0x1)>
  [3] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x75, type 6, 118[1]
GC: ++#205.1.8.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x77 (0x75), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #239.1.1.mem.code.ro <#205.1.9.mem.ro, ofs 0x76, size 1>
  [1] #225.1.2.array <size 5, max 21>
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x77, type 8, 120[6]
GC: ++#219.1.1.num.int
GC: ++#239.1.1.mem.code.ro
GC: ++#225.1.2.array
GC: --#239.1.2.mem.code.ro
GC: --#225.1.3.array
== backtrace ==
  [0] #240.1.1.ctx.forall <code #239.1.1.mem.code.ro, ip 0x0 (0x0), index 1, iterate #225.1.2.array>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #219.1.2.num.int <10 (0xa)>
  [1] #217.1.1.num.bool <0 (0x0)>
  [2] #214.1.1.num.bool <1 (0x1)>
  [3] #210.1.1.num.int <3000 (0xbb8)>
IP: #239:0x0, type 3, 1 (0x1)
== backtrace ==
  [0] #240.1.1.ctx.forall <code #239.1.1.mem.code.ro, ip 0x0 (0x0), index 2, iterate #225.1.2.array>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #219.1.2.num.int <10 (0xa)>
  [2] #217.1.1.num.bool <0 (0x0)>
  [3] #214.1.1.num.bool <1 (0x1)>
  [4] #210.1.1.num.int <3000 (0xbb8)>
IP: #239:0x0, type 3, 1 (0x1)
GC: ++#220.1.1.num.int
== backtrace ==
  [0] #240.1.1.ctx.forall <code #239.1.1.mem.code.ro, ip 0x0 (0x0), index 3, iterate #225.1.2.array>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #220.1.2.num.int <30 (0x1e)>
  [1] #0.0.nil <nil>
  [2] #219.1.2.num.int <10 (0xa)>
  [3] #217.1.1.num.bool <0 (0x0)>
  [4] #214.1.1.num.bool <1 (0x1)>
  [5] #210.1.1.num.int <3000 (0xbb8)>
IP: #239:0x0, type 3, 1 (0x1)
GC: ++#222.1.1.num.int
== backtrace ==
  [0] #240.1.1.ctx.forall <code #239.1.1.mem.code.ro, ip 0x0 (0x0), index 4, iterate #225.1.2.array>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #222.1.2.num.int <40 (0x28)>
  [1] #220.1.2.num.int <30 (0x1e)>
  [2] #0.0.nil <nil>
  [3] #219.1.2.num.int <10 (0xa)>
  [4] #217.1.1.num.bool <0 (0x0)>
  [5] #214.1.1.num.bool <1 (0x1)>
  [6] #210.1.1.num.int <3000 (0xbb8)>
IP: #239:0x0, type 3, 1 (0x1)
GC: ++#223.1.1.num.int
== backtrace ==
  [0] #240.1.1.ctx.forall <code #239.1.1.mem.code.ro, ip 0x0 (0x0), index 5, iterate #225.1.2.array>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #223.1.2.num.int <50 (0x32)>
  [1] #222.1.2.num.int <40 (0x28)>
  [2] #220.1.2.num.int <30 (0x1e)>
  [3] #0.0.nil <nil>
  [4] #219.1.2.num.int <10 (0xa)>
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #239:0x0, type 3, 1 (0x1)
GC: ++#207.1.1.ctx.func
GC: --#240.1.1.ctx.forall
GC: --#207.1.2.ctx.func
GC: --#239.1.1.mem.code.ro
GC: --#225.1.2.array
GC: --#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x7e (0x77), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #223.1.2.num.int <50 (0x32)>
  [1] #222.1.2.num.int <40 (0x28)>
  [2] #220.1.2.num.int <30 (0x1e)>
  [3] #0.0.nil <nil>
  [4] #219.1.2.num.int <10 (0xa)>
  [5] #217.1.1.num.bool <0 (0x0)>
  [6] #214.1.1.num.bool <1 (0x1)>
  [7] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x7e, type 8, 127[5]
GC: ++#238.1.1.hash
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x84 (0x7e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #238.1.2.hash <size 5, max 21>
  [1] #223.1.2.num.int <50 (0x32)>
  [2] #222.1.2.num.int <40 (0x28)>
  [3] #220.1.2.num.int <30 (0x1e)>
  [4] #0.0.nil <nil>
  [5] #219.1.2.num.int <10 (0xa)>
  [6] #217.1.1.num.bool <0 (0x0)>
  [7] #214.1.1.num.bool <1 (0x1)>
  [8] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x84, type 6, 133[1]
GC: ++#205.1.8.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x86 (0x84), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #241.1.1.mem.code.ro <#205.1.9.mem.ro, ofs 0x85, size 1>
  [1] #238.1.2.hash <size 5, max 21>
  [2] #223.1.2.num.int <50 (0x32)>
  [3] #222.1.2.num.int <40 (0x28)>
  [4] #220.1.2.num.int <30 (0x1e)>
  [5] #0.0.nil <nil>
  [6] #219.1.2.num.int <10 (0xa)>
  [7] #217.1.1.num.bool <0 (0x0)>
  [8] #214.1.1.num.bool <1 (0x1)>
  [9] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x86, type 8, 135[6]
GC: ++#227.1.1.mem.str.ro
GC: ++#228.1.1.num.int
GC: ++#241.1.1.mem.code.ro
GC: ++#238.1.2.hash
GC: --#241.1.2.mem.code.ro
GC: --#238.1.3.hash
== backtrace ==
  [0] #242.1.1.ctx.forall <code #241.1.1.mem.code.ro, ip 0x0 (0x0), index 1, iterate #238.1.2.hash>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #228.1.2.num.int <100 (0x64)>
  [1] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [2] #223.1.2.num.int <50 (0x32)>
  [3] #222.1.2.num.int <40 (0x28)>
  [4] #220.1.2.num.int <30 (0x1e)>
  [5] #0.0.nil <nil>
  [6] #219.1.2.num.int <10 (0xa)>
  [7] #217.1.1.num.bool <0 (0x0)>
  [8] #214.1.1.num.bool <1 (0x1)>
  [9] #210.1.1.num.int <3000 (0xbb8)>
IP: #241:0x0, type 3, 1 (0x1)
GC: ++#235.1.1.mem.str.ro
GC: ++#236.1.1.num.int
== backtrace ==
  [0] #242.1.1.ctx.forall <code #241.1.1.mem.code.ro, ip 0x0 (0x0), index 2, iterate #238.1.2.hash>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #236.1.2.num.int <200 (0xc8)>
  [1] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [2] #228.1.2.num.int <100 (0x64)>
  [3] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [4] #223.1.2.num.int <50 (0x32)>
  [5] #222.1.2.num.int <40 (0x28)>
  [6] #220.1.2.num.int <30 (0x1e)>
  [7] #0.0.nil <nil>
  [8] #219.1.2.num.int <10 (0xa)>
  [9] #217.1.1.num.bool <0 (0x0)>
  [10] #214.1.1.num.bool <1 (0x1)>
  [11] #210.1.1.num.int <3000 (0xbb8)>
IP: #241:0x0, type 3, 1 (0x1)
GC: ++#233.1.1.mem.str.ro
GC: ++#234.1.1.num.int
== backtrace ==
  [0] #242.1.1.ctx.forall <code #241.1.1.mem.code.ro, ip 0x0 (0x0), index 3, iterate #238.1.2.hash>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #234.1.2.num.int <300 (0x12c)>
  [1] #233.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [2] #236.1.2.num.int <200 (0xc8)>
  [3] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [4] #228.1.2.num.int <100 (0x64)>
  [5] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [6] #223.1.2.num.int <50 (0x32)>
  [7] #222.1.2.num.int <40 (0x28)>
  [8] #220.1.2.num.int <30 (0x1e)>
  [9] #0.0.nil <nil>
  [10] #219.1.2.num.int <10 (0xa)>
  [11] #217.1.1.num.bool <0 (0x0)>
  [12] #214.1.1.num.bool <1 (0x1)>
  [13] #210.1.1.num.int <3000 (0xbb8)>
IP: #241:0x0, type 3, 1 (0x1)
GC: ++#230.1.1.mem.str.ro
GC: ++#231.1.1.num.int
== backtrace ==
  [0] #242.1.1.ctx.forall <code #241.1.1.mem.code.ro, ip 0x0 (0x0), index 4, iterate #238.1.2.hash>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #231.1.2.num.int <400 (0x190)>
  [1] #230.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x50, size 2, "dd">
  [2] #234.1.2.num.int <300 (0x12c)>
  [3] #233.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #236.1.2.num.int <200 (0xc8)>
  [5] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [6] #228.1.2.num.int <100 (0x64)>
  [7] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [8] #223.1.2.num.int <50 (0x32)>
  [9] #222.1.2.num.int <40 (0x28)>
  [10] #220.1.2.num.int <30 (0x1e)>
  [11] #0.0.nil <nil>
  [12] #219.1.2.num.int <10 (0xa)>
  [13] #217.1.1.num.bool <0 (0x0)>
  [14] #214.1.1.num.bool <1 (0x1)>
  [15] #210.1.1.num.int <3000 (0xbb8)>
IP: #241:0x0, type 3, 1 (0x1)
GC: ++#229.1.1.mem.str.ro
== backtrace ==
  [0] #242.1.1.ctx.forall <code #241.1.1.mem.code.ro, ip 0x0 (0x0), index 5, iterate #238.1.2.hash>
  [1] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #229.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x4c, size 2, "ee">
  [2] #231.1.2.num.int <400 (0x190)>
  [3] #230.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x50, size 2, "dd">
  [4] #234.1.2.num.int <300 (0x12c)>
  [5] #233.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [6] #236.1.2.num.int <200 (0xc8)>
  [7] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [8] #228.1.2.num.int <100 (0x64)>
  [9] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [10] #223.1.2.num.int <50 (0x32)>
  [11] #222.1.2.num.int <40 (0x28)>
  [12] #220.1.2.num.int <30 (0x1e)>
  [13] #0.0.nil <nil>
  [14] #219.1.2.num.int <10 (0xa)>
  [15] #217.1.1.num.bool <0 (0x0)>
  [16] #214.1.1.num.bool <1 (0x1)>
  [17] #210.1.1.num.int <3000 (0xbb8)>
IP: #241:0x0, type 3, 1 (0x1)
GC: ++#207.1.1.ctx.func
GC: --#242.1.1.ctx.forall
GC: --#207.1.2.ctx.func
GC: --#241.1.1.mem.code.ro
GC: --#238.1.2.hash
GC: --#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x8d (0x86), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #229.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x4c, size 2, "ee">
  [2] #231.1.2.num.int <400 (0x190)>
  [3] #230.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x50, size 2, "dd">
  [4] #234.1.2.num.int <300 (0x12c)>
  [5] #233.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [6] #236.1.2.num.int <200 (0xc8)>
  [7] #235.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x60, size 2, "bb">
  [8] #228.1.2.num.int <100 (0x64)>
  [9] #227.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x47, size 2, "aa">
  [10] #223.1.2.num.int <50 (0x32)>
  [11] #222.1.2.num.int <40 (0x28)>
  [12] #220.1.2.num.int <30 (0x1e)>
  [13] #0.0.nil <nil>
  [14] #219.1.2.num.int <10 (0xa)>
  [15] #217.1.1.num.bool <0 (0x0)>
  [16] #214.1.1.num.bool <1 (0x1)>
  [17] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x8d, type 7, 142[3]
GC: ++#205.1.8.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x91 (0x8d), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #243.1.1.mem.str.ro <#205.1.9.mem.ro, ofs 0x8e, size 3, "abc">
  [1] #0.0.nil <nil>
  [2] #229.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x4c, size 2, "ee">
  [3] #231.1.2.num.int <400 (0x190)>
  [4] #230.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x50, size 2, "dd">
  [5] #234.1.2.num.int <300 (0x12c)>
  [6] #233.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [7] #236.1.2.num.int <200 (0xc8)>
  [8] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [9] #228.1.2.num.int <100 (0x64)>
  [10] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [11] #223.1.2.num.int <50 (0x32)>
  [12] #222.1.2.num.int <40 (0x28)>
  [13] #220.1.2.num.int <30 (0x1e)>
  [14] #0.0.nil <nil>
  [15] #219.1.2.num.int <10 (0xa)>
  [16] #217.1.1.num.bool <0 (0x0)>
  [17] #214.1.1.num.bool <1 (0x1)>
  [18] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x91, type 7, 146[5]
GC: ++#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.10.mem.ro, ip 0x97 (0x91), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #244.1.1.mem.str.ro <#205.1.10.mem.ro, ofs 0x92, size 5, "12345">
  [1] #243.1.1.mem.str.ro <#205.1.10.mem.ro, ofs 0x8e, size 3, "abc">
  [2] #0.0.nil <nil>
  [3] #229.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x4c, size 2, "ee">
  [4] #231.1.2.num.int <400 (0x190)>
  [5] #230.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x50, size 2, "dd">
  [6] #234.1.2.num.int <300 (0x12c)>
  [7] #233.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [8] #236.1.2.num.int <200 (0xc8)>
  [9] #235.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x60, size 2, "bb">
  [10] #228.1.2.num.int <100 (0x64)>
  [11] #227.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x47, size 2, "aa">
  [12] #223.1.2.num.int <50 (0x32)>
  [13] #222.1.2.num.int <40 (0x28)>
  [14] #220.1.2.num.int <30 (0x1e)>
  [15] #0.0.nil <nil>
  [16] #219.1.2.num.int <10 (0xa)>
  [17] #217.1.1.num.bool <0 (0x0)>
  [18] #214.1.1.num.bool <1 (0x1)>
  [19] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x97, type 8, 152[3]
GC: --#244.1.1.mem.str.ro
GC: --#205.1.10.mem.ro
GC: --#243.1.1.mem.str.ro
GC: --#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0x9b (0x97), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #245.1.1.mem.str <size 8, "abc12345">
  [1] #0.0.nil <nil>
  [2] #229.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x4c, size 2, "ee">
  [3] #231.1.2.num.int <400 (0x190)>
  [4] #230.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x50, size 2, "dd">
  [5] #234.1.2.num.int <300 (0x12c)>
  [6] #233.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [7] #236.1.2.num.int <200 (0xc8)>
  [8] #235.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x60, size 2, "bb">
  [9] #228.1.2.num.int <100 (0x64)>
  [10] #227.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x47, size 2, "aa">
  [11] #223.1.2.num.int <50 (0x32)>
  [12] #222.1.2.num.int <40 (0x28)>
  [13] #220.1.2.num.int <30 (0x1e)>
  [14] #0.0.nil <nil>
  [15] #219.1.2.num.int <10 (0xa)>
  [16] #217.1.1.num.bool <0 (0x0)>
  [17] #214.1.1.num.bool <1 (0x1)>
  [18] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x9b, type 9, 156[3]
GC: ++#205.1.8.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.9.mem.ro, ip 0x9f (0x9b), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #246.1.1.mem.ref.ro <#205.1.9.mem.ro, ofs 0x9c, size 3, "foo">
  [1] #245.1.1.mem.str <size 8, "abc12345">
  [2] #0.0.nil <nil>
  [3] #229.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x4c, size 2, "ee">
  [4] #231.1.2.num.int <400 (0x190)>
  [5] #230.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x50, size 2, "dd">
  [6] #234.1.2.num.int <300 (0x12c)>
  [7] #233.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [8] #236.1.2.num.int <200 (0xc8)>
  [9] #235.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x60, size 2, "bb">
  [10] #228.1.2.num.int <100 (0x64)>
  [11] #227.1.2.mem.str.ro <#205.1.9.mem.ro, ofs 0x47, size 2, "aa">
  [12] #223.1.2.num.int <50 (0x32)>
  [13] #222.1.2.num.int <40 (0x28)>
  [14] #220.1.2.num.int <30 (0x1e)>
  [15] #0.0.nil <nil>
  [16] #219.1.2.num.int <10 (0xa)>
  [17] #217.1.1.num.bool <0 (0x0)>
  [18] #214.1.1.num.bool <1 (0x1)>
  [19] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0x9f, type 7, 160[3]
GC: ++#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.10.mem.ro, ip 0xa3 (0x9f), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #247.1.1.mem.str.ro <#205.1.10.mem.ro, ofs 0xa0, size 3, "123">
  [1] #246.1.1.mem.ref.ro <#205.1.10.mem.ro, ofs 0x9c, size 3, "foo">
  [2] #245.1.1.mem.str <size 8, "abc12345">
  [3] #0.0.nil <nil>
  [4] #229.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x4c, size 2, "ee">
  [5] #231.1.2.num.int <400 (0x190)>
  [6] #230.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x50, size 2, "dd">
  [7] #234.1.2.num.int <300 (0x12c)>
  [8] #233.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [9] #236.1.2.num.int <200 (0xc8)>
  [10] #235.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x60, size 2, "bb">
  [11] #228.1.2.num.int <100 (0x64)>
  [12] #227.1.2.mem.str.ro <#205.1.10.mem.ro, ofs 0x47, size 2, "aa">
  [13] #223.1.2.num.int <50 (0x32)>
  [14] #222.1.2.num.int <40 (0x28)>
  [15] #220.1.2.num.int <30 (0x1e)>
  [16] #0.0.nil <nil>
  [17] #219.1.2.num.int <10 (0xa)>
  [18] #217.1.1.num.bool <0 (0x0)>
  [19] #214.1.1.num.bool <1 (0x1)>
  [20] #210.1.1.num.int <3000 (0xbb8)>
IP: #205:0xa3, type 8, 164[3]
GC: --#247.1.1.mem.str.ro
GC: --#205.1.10.mem.ro
GC: --#246.1.1.mem.ref.ro
GC: --#205.1.9.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.8.mem.ro, ip 0xa7 (0xa3), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #248.1.1.mem.ref <size 6, "foo123">
  [1] #245.1.1.mem.str <size 8, "abc12345">
  [2] #0.0.nil <nil>
  [3] #229.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x4c, size 2, "ee">
  [4] #231.1.2.num.int <400 (0x190)>
  [5] #230.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x50, size 2, "dd">
  [6] #234.1.2.num.int <300 (0x12c)>
  [7] #233.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [8] #236.1.2.num.int <200 (0xc8)>
  [9] #235.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x60, size 2, "bb">
  [10] #228.1.2.num.int <100 (0x64)>
  [11] #227.1.2.mem.str.ro <#205.1.8.mem.ro, ofs 0x47, size 2, "aa">
  [12] #223.1.2.num.int <50 (0x32)>
  [13] #222.1.2.num.int <40 (0x28)>
  [14] #220.1.2.num.int <30 (0x1e)>
  [15] #0.0.nil <nil>
  [16] #219.1.2.num.int <10 (0xa)>
  [17] #217.1.1.num.bool <0 (0x0)>
  [18] #214.1.1.num.bool <1 (0x1)>
  [19] #210.1.1.num.int <3000 (0xbb8)>
