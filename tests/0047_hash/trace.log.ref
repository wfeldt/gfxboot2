# ---  trace  ---
IP: #188:0x0, type 5, 1[7]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x8, type 9, 9[3]
GC: ++#188.1.1.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0xc (0x8), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0xc, type 8, 13[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0xe (0xc), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0xe, type 7, 15[2]
GC: ++#188.1.2.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x11 (0xe), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #192.1.1.mem.str.ro <#188.1.3.mem.ro, ofs 0xf, size 2, "aa">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #191.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x11, type 1, 11 (0xb)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x13 (0x11), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.1.num.int <11 (0xb)>
  [1] #192.1.1.mem.str.ro <#188.1.3.mem.ro, ofs 0xf, size 2, "aa">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #191.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x13, type 7, 20[2]
GC: ++#188.1.3.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x16 (0x13), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #194.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x14, size 2, "cc">
  [1] #193.1.1.num.int <11 (0xb)>
  [2] #192.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0xf, size 2, "aa">
  [3] #13.1.2.num.prim <4 (0x4)>
  [4] #191.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x16, type 1, 33 (0x21)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x18 (0x16), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #195.1.1.num.int <33 (0x21)>
  [1] #194.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x14, size 2, "cc">
  [2] #193.1.1.num.int <11 (0xb)>
  [3] #192.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0xf, size 2, "aa">
  [4] #13.1.2.num.prim <4 (0x4)>
  [5] #191.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x18, type 7, 25[2]
GC: ++#188.1.4.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x1b (0x18), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #196.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x19, size 2, "bb">
  [1] #195.1.1.num.int <33 (0x21)>
  [2] #194.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x14, size 2, "cc">
  [3] #193.1.1.num.int <11 (0xb)>
  [4] #192.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0xf, size 2, "aa">
  [5] #13.1.2.num.prim <4 (0x4)>
  [6] #191.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x1b, type 1, 22 (0x16)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x1d (0x1b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
  [1] #196.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x19, size 2, "bb">
  [2] #195.1.1.num.int <33 (0x21)>
  [3] #194.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x14, size 2, "cc">
  [4] #193.1.1.num.int <11 (0xb)>
  [5] #192.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0xf, size 2, "aa">
  [6] #13.1.2.num.prim <4 (0x4)>
  [7] #191.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x1d, type 8, 30[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x1f (0x1d), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #198.1.1.hash <size 3, max 3>
  [1] #191.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x1f, type 8, 32[3]
GC: ++#191.1.1.mem.ref.ro
GC: ++#198.1.1.hash
GC: --#198.1.2.hash
GC: --#191.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x23 (0x1f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x23, type 8, 36[3]
GC: ++#198.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x27 (0x23), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #198.1.2.hash <size 3, max 3>
IP: #188:0x27, type 7, 40[2]
GC: ++#188.1.5.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x2a (0x27), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #199.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x28, size 2, "bb">
  [1] #198.1.2.hash <size 3, max 3>
IP: #188:0x2a, type 8, 43[3]
GC: ++#197.1.1.num.int
GC: --#199.1.1.mem.str.ro
GC: --#188.1.6.mem.ro
GC: --#198.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x2e (0x2a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.2.num.int <22 (0x16)>
IP: #188:0x2e, type 8, 47[3]
GC: ++#198.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x32 (0x2e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #198.1.2.hash <size 3, max 3>
  [1] #197.1.2.num.int <22 (0x16)>
IP: #188:0x32, type 7, 51[2]
GC: ++#188.1.5.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x35 (0x32), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #201.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x33, size 2, "bb">
  [1] #198.1.2.hash <size 3, max 3>
  [2] #197.1.2.num.int <22 (0x16)>
IP: #188:0x35, type 1, 99 (0x63)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x37 (0x35), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #202.1.1.num.int <99 (0x63)>
  [1] #201.1.1.mem.str.ro <#188.1.6.mem.ro, ofs 0x33, size 2, "bb">
  [2] #198.1.2.hash <size 3, max 3>
  [3] #197.1.2.num.int <22 (0x16)>
IP: #188:0x37, type 8, 56[3]
GC: ++#201.1.1.mem.str.ro
GC: ++#202.1.1.num.int
GC: --#196.1.1.mem.str.ro
GC: --#188.1.6.mem.ro
GC: --#197.1.2.num.int
GC: --#202.1.2.num.int
GC: --#201.1.2.mem.str.ro
GC: --#198.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x3b (0x37), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
IP: #188:0x3b, type 9, 60[3]
GC: ++#188.1.5.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x3f (0x3b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #203.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x3c, size 3, "bar">
  [1] #197.1.1.num.int <22 (0x16)>
IP: #188:0x3f, type 8, 64[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x41 (0x3f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #203.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x3c, size 3, "bar">
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x41, type 8, 66[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x43 (0x41), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.1.hash <size 0, max 16>
  [1] #203.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x3c, size 3, "bar">
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x43, type 8, 68[3]
GC: ++#203.1.1.mem.ref.ro
GC: ++#204.1.1.hash
GC: --#204.1.2.hash
GC: --#203.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x47 (0x43), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
IP: #188:0x47, type 8, 72[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x4b (0x47), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 0, max 16>
  [1] #197.1.1.num.int <22 (0x16)>
IP: #188:0x4b, type 7, 76[2]
GC: ++#188.1.6.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x4e (0x4b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #205.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x4c, size 2, "bb">
  [1] #204.1.2.hash <size 0, max 16>
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x4e, type 1, 200 (0xc8)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x51 (0x4e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.1.num.int <200 (0xc8)>
  [1] #205.1.1.mem.str.ro <#188.1.7.mem.ro, ofs 0x4c, size 2, "bb">
  [2] #204.1.2.hash <size 0, max 16>
  [3] #197.1.1.num.int <22 (0x16)>
IP: #188:0x51, type 8, 82[3]
GC: ++#205.1.1.mem.str.ro
GC: ++#206.1.1.num.int
GC: --#206.1.2.num.int
GC: --#205.1.2.mem.str.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x55 (0x51), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
IP: #188:0x55, type 8, 86[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.7.mem.ro, ip 0x59 (0x55), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 1, max 16>
  [1] #197.1.1.num.int <22 (0x16)>
IP: #188:0x59, type 7, 90[2]
GC: ++#188.1.7.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x5c (0x59), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #207.1.1.mem.str.ro <#188.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [1] #204.1.2.hash <size 1, max 16>
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x5c, type 1, 300 (0x12c)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x5f (0x5c), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #208.1.1.num.int <300 (0x12c)>
  [1] #207.1.1.mem.str.ro <#188.1.8.mem.ro, ofs 0x5a, size 2, "cc">
  [2] #204.1.2.hash <size 1, max 16>
  [3] #197.1.1.num.int <22 (0x16)>
IP: #188:0x5f, type 8, 96[3]
GC: ++#207.1.1.mem.str.ro
GC: ++#208.1.1.num.int
GC: --#208.1.2.num.int
GC: --#207.1.2.mem.str.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x63 (0x5f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
IP: #188:0x63, type 8, 100[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.8.mem.ro, ip 0x67 (0x63), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 2, max 16>
  [1] #197.1.1.num.int <22 (0x16)>
IP: #188:0x67, type 7, 104[2]
GC: ++#188.1.8.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x6a (0x67), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [1] #204.1.2.hash <size 2, max 16>
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x6a, type 1, 100 (0x64)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x6c (0x6a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #210.1.1.num.int <100 (0x64)>
  [1] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [2] #204.1.2.hash <size 2, max 16>
  [3] #197.1.1.num.int <22 (0x16)>
IP: #188:0x6c, type 8, 109[3]
GC: ++#209.1.1.mem.str.ro
GC: ++#210.1.1.num.int
GC: --#210.1.2.num.int
GC: --#209.1.2.mem.str.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x70 (0x6c), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <22 (0x16)>
IP: #188:0x70, type 8, 113[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x74 (0x70), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 3, max 16>
  [1] #197.1.1.num.int <22 (0x16)>
IP: #188:0x74, type 6, 117[1]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x76 (0x74), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #211.1.1.mem.code.ro <#188.1.10.mem.ro, ofs 0x75, size 1>
  [1] #204.1.2.hash <size 3, max 16>
  [2] #197.1.1.num.int <22 (0x16)>
IP: #188:0x76, type 8, 119[6]
GC: ++#209.1.1.mem.str.ro
GC: ++#210.1.1.num.int
GC: ++#211.1.1.mem.code.ro
GC: ++#204.1.2.hash
GC: --#211.1.2.mem.code.ro
GC: --#204.1.3.hash
== backtrace ==
  [0] #212.1.1.ctx.forall <code #211.1.1.mem.code.ro, ip 0x0 (0x0), index 1, iterate #204.1.2.hash>
  [1] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x7d (0x76), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #210.1.2.num.int <100 (0x64)>
  [1] #209.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [2] #197.1.1.num.int <22 (0x16)>
IP: #211:0x0, type 3, 1 (0x1)
GC: ++#205.1.1.mem.str.ro
GC: ++#206.1.1.num.int
== backtrace ==
  [0] #212.1.1.ctx.forall <code #211.1.1.mem.code.ro, ip 0x0 (0x0), index 2, iterate #204.1.2.hash>
  [1] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x7d (0x76), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.2.num.int <200 (0xc8)>
  [1] #205.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [2] #210.1.2.num.int <100 (0x64)>
  [3] #209.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [4] #197.1.1.num.int <22 (0x16)>
IP: #211:0x0, type 3, 1 (0x1)
GC: ++#207.1.1.mem.str.ro
GC: ++#208.1.1.num.int
== backtrace ==
  [0] #212.1.1.ctx.forall <code #211.1.1.mem.code.ro, ip 0x0 (0x0), index 3, iterate #204.1.2.hash>
  [1] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x7d (0x76), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #208.1.2.num.int <300 (0x12c)>
  [1] #207.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [2] #206.1.2.num.int <200 (0xc8)>
  [3] #205.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [4] #210.1.2.num.int <100 (0x64)>
  [5] #209.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [6] #197.1.1.num.int <22 (0x16)>
IP: #211:0x0, type 3, 1 (0x1)
GC: ++#190.1.1.ctx.func
GC: --#212.1.1.ctx.forall
GC: --#190.1.2.ctx.func
GC: --#211.1.1.mem.code.ro
GC: --#204.1.2.hash
GC: --#188.1.10.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x7d (0x76), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #208.1.2.num.int <300 (0x12c)>
  [1] #207.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [2] #206.1.2.num.int <200 (0xc8)>
  [3] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [4] #210.1.2.num.int <100 (0x64)>
  [5] #209.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [6] #197.1.1.num.int <22 (0x16)>
IP: #188:0x7d, type 1, 1000 (0x3e8)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x80 (0x7d), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.2.num.int <300 (0x12c)>
  [2] #207.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.2.num.int <200 (0xc8)>
  [4] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.2.num.int <100 (0x64)>
  [6] #209.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
IP: #188:0x80, type 8, 129[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x84 (0x80), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 3, max 16>
  [1] #213.1.1.num.int <1000 (0x3e8)>
  [2] #208.1.2.num.int <300 (0x12c)>
  [3] #207.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #206.1.2.num.int <200 (0xc8)>
  [5] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [6] #210.1.2.num.int <100 (0x64)>
  [7] #209.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [8] #197.1.1.num.int <22 (0x16)>
IP: #188:0x84, type 7, 133[2]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x87 (0x84), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #214.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x85, size 2, "aa">
  [1] #204.1.2.hash <size 3, max 16>
  [2] #213.1.1.num.int <1000 (0x3e8)>
  [3] #208.1.2.num.int <300 (0x12c)>
  [4] #207.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [5] #206.1.2.num.int <200 (0xc8)>
  [6] #205.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [7] #210.1.2.num.int <100 (0x64)>
  [8] #209.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [9] #197.1.1.num.int <22 (0x16)>
IP: #188:0x87, type 8, 136[6]
GC: --#209.1.2.mem.str.ro
GC: --#210.1.2.num.int
GC: --#214.1.1.mem.str.ro
GC: --#188.1.10.mem.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x8e (0x87), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.2.num.int <300 (0x12c)>
  [2] #207.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.2.num.int <200 (0xc8)>
  [4] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.1.num.int <100 (0x64)>
  [6] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
IP: #188:0x8e, type 8, 143[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x92 (0x8e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 2, max 16>
  [1] #213.1.1.num.int <1000 (0x3e8)>
  [2] #208.1.2.num.int <300 (0x12c)>
  [3] #207.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #206.1.2.num.int <200 (0xc8)>
  [5] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [6] #210.1.1.num.int <100 (0x64)>
  [7] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [8] #197.1.1.num.int <22 (0x16)>
IP: #188:0x92, type 7, 147[2]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0x95 (0x92), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #215.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x93, size 2, "cc">
  [1] #204.1.2.hash <size 2, max 16>
  [2] #213.1.1.num.int <1000 (0x3e8)>
  [3] #208.1.2.num.int <300 (0x12c)>
  [4] #207.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [5] #206.1.2.num.int <200 (0xc8)>
  [6] #205.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [7] #210.1.1.num.int <100 (0x64)>
  [8] #209.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [9] #197.1.1.num.int <22 (0x16)>
IP: #188:0x95, type 8, 150[6]
GC: --#207.1.2.mem.str.ro
GC: --#208.1.2.num.int
GC: --#215.1.1.mem.str.ro
GC: --#188.1.10.mem.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0x9c (0x95), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.1.num.int <300 (0x12c)>
  [2] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.2.num.int <200 (0xc8)>
  [4] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.1.num.int <100 (0x64)>
  [6] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
IP: #188:0x9c, type 8, 157[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xa0 (0x9c), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 1, max 16>
  [1] #213.1.1.num.int <1000 (0x3e8)>
  [2] #208.1.1.num.int <300 (0x12c)>
  [3] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #206.1.2.num.int <200 (0xc8)>
  [5] #205.1.2.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [6] #210.1.1.num.int <100 (0x64)>
  [7] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [8] #197.1.1.num.int <22 (0x16)>
IP: #188:0xa0, type 7, 161[2]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0xa3 (0xa0), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #216.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0xa1, size 2, "bb">
  [1] #204.1.2.hash <size 1, max 16>
  [2] #213.1.1.num.int <1000 (0x3e8)>
  [3] #208.1.1.num.int <300 (0x12c)>
  [4] #207.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [5] #206.1.2.num.int <200 (0xc8)>
  [6] #205.1.2.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [7] #210.1.1.num.int <100 (0x64)>
  [8] #209.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [9] #197.1.1.num.int <22 (0x16)>
IP: #188:0xa3, type 8, 164[6]
GC: --#205.1.2.mem.str.ro
GC: --#206.1.2.num.int
GC: --#216.1.1.mem.str.ro
GC: --#188.1.10.mem.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xaa (0xa3), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.1.num.int <300 (0x12c)>
  [2] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.1.num.int <200 (0xc8)>
  [4] #205.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.1.num.int <100 (0x64)>
  [6] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
IP: #188:0xaa, type 8, 171[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xae (0xaa), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 0, max 16>
  [1] #213.1.1.num.int <1000 (0x3e8)>
  [2] #208.1.1.num.int <300 (0x12c)>
  [3] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #206.1.1.num.int <200 (0xc8)>
  [5] #205.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [6] #210.1.1.num.int <100 (0x64)>
  [7] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [8] #197.1.1.num.int <22 (0x16)>
IP: #188:0xae, type 7, 175[2]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0xb1 (0xae), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #217.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0xaf, size 2, "xx">
  [1] #204.1.2.hash <size 0, max 16>
  [2] #213.1.1.num.int <1000 (0x3e8)>
  [3] #208.1.1.num.int <300 (0x12c)>
  [4] #207.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [5] #206.1.1.num.int <200 (0xc8)>
  [6] #205.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [7] #210.1.1.num.int <100 (0x64)>
  [8] #209.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [9] #197.1.1.num.int <22 (0x16)>
IP: #188:0xb1, type 8, 178[6]
GC: --#217.1.1.mem.str.ro
GC: --#188.1.10.mem.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xb8 (0xb1), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.1.num.int <300 (0x12c)>
  [2] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.1.num.int <200 (0xc8)>
  [4] #205.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.1.num.int <100 (0x64)>
  [6] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
IP: #188:0xb8, type 8, 185[3]
GC: ++#204.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xbc (0xb8), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.2.hash <size 0, max 16>
  [1] #213.1.1.num.int <1000 (0x3e8)>
  [2] #208.1.1.num.int <300 (0x12c)>
  [3] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [4] #206.1.1.num.int <200 (0xc8)>
  [5] #205.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [6] #210.1.1.num.int <100 (0x64)>
  [7] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [8] #197.1.1.num.int <22 (0x16)>
IP: #188:0xbc, type 6, 189[1]
GC: ++#188.1.9.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.10.mem.ro, ip 0xbe (0xbc), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #218.1.1.mem.code.ro <#188.1.10.mem.ro, ofs 0xbd, size 1>
  [1] #204.1.2.hash <size 0, max 16>
  [2] #213.1.1.num.int <1000 (0x3e8)>
  [3] #208.1.1.num.int <300 (0x12c)>
  [4] #207.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x5a, size 2, "cc">
  [5] #206.1.1.num.int <200 (0xc8)>
  [6] #205.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x4c, size 2, "bb">
  [7] #210.1.1.num.int <100 (0x64)>
  [8] #209.1.1.mem.str.ro <#188.1.10.mem.ro, ofs 0x68, size 2, "aa">
  [9] #197.1.1.num.int <22 (0x16)>
IP: #188:0xbe, type 8, 191[6]
GC: --#218.1.1.mem.code.ro
GC: --#188.1.10.mem.ro
GC: --#204.1.2.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.9.mem.ro, ip 0xc5 (0xbe), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #213.1.1.num.int <1000 (0x3e8)>
  [1] #208.1.1.num.int <300 (0x12c)>
  [2] #207.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x5a, size 2, "cc">
  [3] #206.1.1.num.int <200 (0xc8)>
  [4] #205.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x4c, size 2, "bb">
  [5] #210.1.1.num.int <100 (0x64)>
  [6] #209.1.1.mem.str.ro <#188.1.9.mem.ro, ofs 0x68, size 2, "aa">
  [7] #197.1.1.num.int <22 (0x16)>
