# ---  trace  ---
IP: #188:0x0, type 5, 1[7]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x8, type 9, 9[3]
GC: ++#188.1.1.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0xc (0x8), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0xc, type 7, 13[6]
GC: ++#188.1.2.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x13 (0xc), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #192.1.1.mem.str.ro <#188.1.3.mem.ro, ofs 0xd, size 6, "abc123">
  [1] #191.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x13, type 8, 20[6]
GC: --#192.1.1.mem.str.ro
GC: --#188.1.3.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x1a (0x13), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.1.mem.str <size 6, "abc123">
  [1] #191.1.1.mem.ref.ro <#188.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #188:0x1a, type 8, 27[3]
GC: ++#191.1.1.mem.ref.ro
GC: ++#193.1.1.mem.str
GC: --#193.1.2.mem.str
GC: --#191.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x1e (0x1a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
IP: #188:0x1e, type 8, 31[3]
GC: ++#193.1.1.mem.str
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x22 (0x1e), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.2.mem.str <size 6, "abc123">
IP: #188:0x22, type 8, 35[6]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.2.mem.ro, ip 0x29 (0x22), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x29, type 9, 42[3]
GC: ++#188.1.2.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x2d (0x29), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #195.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x2a, size 3, "bar">
  [1] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x2d, type 8, 46[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.3.mem.ro, ip 0x2f (0x2d), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #195.1.1.mem.ref.ro <#188.1.3.mem.ro, ofs 0x2a, size 3, "bar">
  [2] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x2f, type 7, 48[2]
GC: ++#188.1.3.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x32 (0x2f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #196.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x30, size 2, "aa">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #195.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x2a, size 3, "bar">
  [3] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x32, type 1, 11 (0xb)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.4.mem.ro, ip 0x34 (0x32), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #197.1.1.num.int <11 (0xb)>
  [1] #196.1.1.mem.str.ro <#188.1.4.mem.ro, ofs 0x30, size 2, "aa">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #195.1.1.mem.ref.ro <#188.1.4.mem.ro, ofs 0x2a, size 3, "bar">
  [4] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x34, type 7, 53[2]
GC: ++#188.1.4.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x37 (0x34), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #198.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x35, size 2, "bb">
  [1] #197.1.1.num.int <11 (0xb)>
  [2] #196.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x30, size 2, "aa">
  [3] #13.1.2.num.prim <4 (0x4)>
  [4] #195.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x2a, size 3, "bar">
  [5] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x37, type 1, 22 (0x16)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x39 (0x37), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #199.1.1.num.int <22 (0x16)>
  [1] #198.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x35, size 2, "bb">
  [2] #197.1.1.num.int <11 (0xb)>
  [3] #196.1.1.mem.str.ro <#188.1.5.mem.ro, ofs 0x30, size 2, "aa">
  [4] #13.1.2.num.prim <4 (0x4)>
  [5] #195.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x2a, size 3, "bar">
  [6] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x39, type 8, 58[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x3b (0x39), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #200.1.1.hash <size 2, max 2>
  [1] #195.1.1.mem.ref.ro <#188.1.5.mem.ro, ofs 0x2a, size 3, "bar">
  [2] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x3b, type 8, 60[3]
GC: ++#195.1.1.mem.ref.ro
GC: ++#200.1.1.hash
GC: --#200.1.2.hash
GC: --#195.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x3f (0x3b), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x3f, type 8, 64[3]
GC: ++#200.1.1.hash
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x43 (0x3f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #200.1.2.hash <size 2, max 2>
  [1] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x43, type 8, 68[6]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.5.mem.ro, ip 0x4a (0x43), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #200.1.2.hash.ro <size 2, max 2>
  [1] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x4a, type 9, 75[4]
GC: ++#188.1.5.mem.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x4f (0x4a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [1] #200.1.2.hash.ro <size 2, max 2>
  [2] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x4f, type 8, 80[1]
GC: ++#9.1.1.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x51 (0x4f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #9.1.2.num.prim <2 (0x2)>
  [1] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [2] #200.1.2.hash.ro <size 2, max 2>
  [3] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x51, type 1, 1 (0x1)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x52 (0x51), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #202.1.1.num.int <1 (0x1)>
  [1] #9.1.2.num.prim <2 (0x2)>
  [2] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [3] #200.1.2.hash.ro <size 2, max 2>
  [4] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x52, type 1, 2 (0x2)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x53 (0x52), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #203.1.1.num.int <2 (0x2)>
  [1] #202.1.1.num.int <1 (0x1)>
  [2] #9.1.2.num.prim <2 (0x2)>
  [3] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [4] #200.1.2.hash.ro <size 2, max 2>
  [5] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x53, type 1, 3 (0x3)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x54 (0x53), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #204.1.1.num.int <3 (0x3)>
  [1] #203.1.1.num.int <2 (0x2)>
  [2] #202.1.1.num.int <1 (0x1)>
  [3] #9.1.2.num.prim <2 (0x2)>
  [4] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [5] #200.1.2.hash.ro <size 2, max 2>
  [6] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x54, type 8, 85[1]
GC: --#9.1.2.num.prim
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x56 (0x54), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #205.1.1.array <size 3, max 3>
  [1] #201.1.1.mem.ref.ro <#188.1.6.mem.ro, ofs 0x4b, size 4, "zapp">
  [2] #200.1.2.hash.ro <size 2, max 2>
  [3] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x56, type 8, 87[3]
GC: ++#201.1.1.mem.ref.ro
GC: ++#205.1.1.array
GC: --#205.1.2.array
GC: --#201.1.2.mem.ref.ro
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x5a (0x56), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #200.1.2.hash.ro <size 2, max 2>
  [1] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x5a, type 8, 91[4]
GC: ++#205.1.1.array
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x5f (0x5a), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #205.1.2.array <size 3, max 3>
  [1] #200.1.2.hash.ro <size 2, max 2>
  [2] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x5f, type 8, 96[6]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x66 (0x5f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #205.1.2.array.ro <size 3, max 3>
  [1] #200.1.2.hash.ro <size 2, max 2>
  [2] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x66, type 1, 10 (0xa)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x68 (0x66), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.1.num.int <10 (0xa)>
  [1] #205.1.2.array.ro <size 3, max 3>
  [2] #200.1.2.hash.ro <size 2, max 2>
  [3] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x68, type 8, 105[6]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x6f (0x68), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #206.1.1.num.int.ro <10 (0xa)>
  [1] #205.1.2.array.ro <size 3, max 3>
  [2] #200.1.2.hash.ro <size 2, max 2>
  [3] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x6f, type 0, 0 (0x0)
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x70 (0x6f), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #206.1.1.num.int.ro <10 (0xa)>
  [2] #205.1.2.array.ro <size 3, max 3>
  [3] #200.1.2.hash.ro <size 2, max 2>
  [4] #193.1.2.mem.str.ro <size 6, "abc123">
IP: #188:0x70, type 8, 113[6]
== backtrace ==
  [0] #190.1.1.ctx.func <code #188.1.6.mem.ro, ip 0x77 (0x70), dict #4.1.2.hash>
== stack (#189.1.1.array) ==
  [0] #0.0.nil <nil>
  [1] #206.1.1.num.int.ro <10 (0xa)>
  [2] #205.1.2.array.ro <size 3, max 3>
  [3] #200.1.2.hash.ro <size 2, max 2>
  [4] #193.1.2.mem.str.ro <size 6, "abc123">
