# ---  trace  ---
IP: #186:0x0, type 5, 1[7]
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x8, type 9, 9[3]
GC: ++#186.1.1.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.2.mem.ro, ip 0xc (0x8), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #189.1.1.mem.ref.ro <#186.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0xc, type 8, 13[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.2.mem.ro, ip 0xe (0xc), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #189.1.1.mem.ref.ro <#186.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0xe, type 9, 15[1]
GC: ++#186.1.2.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x10 (0xe), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #190.1.1.mem.ref.ro <#186.1.3.mem.ro, ofs 0xf, size 1, "x">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #189.1.1.mem.ref.ro <#186.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0x10, type 1, 10 (0xa)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x12 (0x10), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.1.num.int <10 (0xa)>
  [1] #190.1.1.mem.ref.ro <#186.1.3.mem.ro, ofs 0xf, size 1, "x">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #189.1.1.mem.ref.ro <#186.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0x12, type 9, 19[2]
GC: ++#186.1.3.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.4.mem.ro, ip 0x15 (0x12), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #192.1.1.mem.ref.ro <#186.1.4.mem.ro, ofs 0x13, size 2, "3x">
  [1] #191.1.1.num.int <10 (0xa)>
  [2] #190.1.1.mem.ref.ro <#186.1.4.mem.ro, ofs 0xf, size 1, "x">
  [3] #13.1.2.num.prim <4 (0x4)>
  [4] #189.1.1.mem.ref.ro <#186.1.4.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0x15, type 6, 22[8]
GC: ++#186.1.4.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x1e (0x15), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #193.1.1.mem.code.ro <#186.1.5.mem.ro, ofs 0x16, size 8>
  [1] #192.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0x13, size 2, "3x">
  [2] #191.1.1.num.int <10 (0xa)>
  [3] #190.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0xf, size 1, "x">
  [4] #13.1.2.num.prim <4 (0x4)>
  [5] #189.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0x1e, type 8, 31[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x20 (0x1e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.1.hash <size 2, max 2>
  [1] #189.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #186:0x20, type 8, 33[3]
GC: ++#189.1.1.mem.ref.ro
GC: ++#194.1.1.hash
GC: --#194.1.2.hash
GC: --#189.1.2.mem.ref.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x24 (0x20), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x24, type 8, 37[3]
GC: ++#194.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x28 (0x24), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.2.hash <size 2, max 2>
IP: #186:0x28, type 10, 41[1]
GC: ++#191.1.1.num.int
GC: --#194.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x2a (0x28), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.2.num.int <10 (0xa)>
IP: #186:0x2a, type 8, 43[3]
GC: ++#194.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x2e (0x2a), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.2.hash <size 2, max 2>
  [1] #191.1.2.num.int <10 (0xa)>
IP: #186:0x2e, type 10, 47[2]
GC: ++#193.1.1.mem.code.ro
GC: ++#194.1.2.hash
GC: --#194.1.3.hash
== backtrace ==
  [0] #195.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x0 (0x0), dict #196.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x31 (0x2e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.2.num.int <10 (0xa)>
IP: #193:0x0, type 8, 1[1]
GC: ++#191.1.2.num.int
== backtrace ==
  [0] #195.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x2 (0x0), dict #196.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x31 (0x2e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.3.num.int <10 (0xa)>
  [1] #191.1.3.num.int <10 (0xa)>
IP: #193:0x2, type 1, 3 (0x3)
== backtrace ==
  [0] #195.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x3 (0x2), dict #196.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x31 (0x2e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #197.1.1.num.int <3 (0x3)>
  [1] #191.1.3.num.int <10 (0xa)>
  [2] #191.1.3.num.int <10 (0xa)>
IP: #193:0x3, type 8, 4[3]
GC: --#197.1.1.num.int
GC: --#191.1.3.num.int
== backtrace ==
  [0] #195.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x7 (0x3), dict #196.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x31 (0x2e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #198.1.1.num.int <30 (0x1e)>
  [1] #191.1.2.num.int <10 (0xa)>
IP: #193:0x7, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#195.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#193.1.2.mem.code.ro
GC: --#196.1.1.hash
GC: --#194.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x31 (0x2e), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #198.1.1.num.int <30 (0x1e)>
  [1] #191.1.2.num.int <10 (0xa)>
