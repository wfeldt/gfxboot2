# ---  trace  ---
IP: #205:0x0, type 5, 1[7]
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.1.mem.ro, ip 0x8 (0x0), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
IP: #205:0x8, type 9, 9[3]
GC: ++#205.1.1.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0xc (0x8), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #208.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0xc, type 8, 13[1]
GC: ++#17.1.1.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.2.mem.ro, ip 0xe (0xc), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #17.1.2.num.prim <4 (0x4)>
  [1] #208.1.1.mem.ref.ro <#205.1.2.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0xe, type 9, 15[1]
GC: ++#205.1.2.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.3.mem.ro, ip 0x10 (0xe), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #209.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0xf, size 1, "x">
  [1] #17.1.2.num.prim <4 (0x4)>
  [2] #208.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0x10, type 1, 10 (0xa)
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.3.mem.ro, ip 0x12 (0x10), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #210.1.1.num.int <10 (0xa)>
  [1] #209.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0xf, size 1, "x">
  [2] #17.1.2.num.prim <4 (0x4)>
  [3] #208.1.1.mem.ref.ro <#205.1.3.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0x12, type 9, 19[2]
GC: ++#205.1.3.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.4.mem.ro, ip 0x15 (0x12), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #211.1.1.mem.ref.ro <#205.1.4.mem.ro, ofs 0x13, size 2, "3x">
  [1] #210.1.1.num.int <10 (0xa)>
  [2] #209.1.1.mem.ref.ro <#205.1.4.mem.ro, ofs 0xf, size 1, "x">
  [3] #17.1.2.num.prim <4 (0x4)>
  [4] #208.1.1.mem.ref.ro <#205.1.4.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0x15, type 6, 22[8]
GC: ++#205.1.4.mem.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x1e (0x15), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #212.1.1.mem.code.ro <#205.1.5.mem.ro, ofs 0x16, size 8>
  [1] #211.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0x13, size 2, "3x">
  [2] #210.1.1.num.int <10 (0xa)>
  [3] #209.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0xf, size 1, "x">
  [4] #17.1.2.num.prim <4 (0x4)>
  [5] #208.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0x1e, type 8, 31[1]
GC: --#17.1.2.num.prim
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x20 (0x1e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #213.1.1.hash <size 2, max 2>
  [1] #208.1.1.mem.ref.ro <#205.1.5.mem.ro, ofs 0x9, size 3, "foo">
IP: #205:0x20, type 8, 33[3]
GC: ++#208.1.1.mem.ref.ro
GC: ++#213.1.1.hash
GC: --#213.1.2.hash
GC: --#208.1.2.mem.ref.ro
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x24 (0x20), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
IP: #205:0x24, type 8, 37[3]
GC: ++#213.1.1.hash
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x28 (0x24), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #213.1.2.hash <size 2, max 2>
IP: #205:0x28, type 10, 41[1]
GC: ++#210.1.1.num.int
GC: --#213.1.2.hash
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x2a (0x28), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #210.1.2.num.int <10 (0xa)>
IP: #205:0x2a, type 8, 43[3]
GC: ++#213.1.1.hash
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x2e (0x2a), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #213.1.2.hash <size 2, max 2>
  [1] #210.1.2.num.int <10 (0xa)>
IP: #205:0x2e, type 10, 47[2]
GC: ++#212.1.1.mem.code.ro
GC: ++#213.1.2.hash
GC: --#213.1.3.hash
== backtrace ==
  [0] #214.1.1.ctx.func <code #212.1.2.mem.code.ro, ip 0x0 (0x0), dict #215.1.1.hash>
  [1] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x31 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #210.1.2.num.int <10 (0xa)>
IP: #212:0x0, type 8, 1[1]
GC: ++#210.1.2.num.int
== backtrace ==
  [0] #214.1.1.ctx.func <code #212.1.2.mem.code.ro, ip 0x2 (0x0), dict #215.1.1.hash>
  [1] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x31 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #210.1.3.num.int <10 (0xa)>
  [1] #210.1.3.num.int <10 (0xa)>
IP: #212:0x2, type 1, 3 (0x3)
== backtrace ==
  [0] #214.1.1.ctx.func <code #212.1.2.mem.code.ro, ip 0x3 (0x2), dict #215.1.1.hash>
  [1] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x31 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #216.1.1.num.int <3 (0x3)>
  [1] #210.1.3.num.int <10 (0xa)>
  [2] #210.1.3.num.int <10 (0xa)>
IP: #212:0x3, type 8, 4[3]
GC: --#216.1.1.num.int
GC: --#210.1.3.num.int
== backtrace ==
  [0] #214.1.1.ctx.func <code #212.1.2.mem.code.ro, ip 0x7 (0x3), dict #215.1.1.hash>
  [1] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x31 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #217.1.1.num.int <30 (0x1e)>
  [1] #210.1.2.num.int <10 (0xa)>
IP: #212:0x7, type 3, 1 (0x1)
GC: ++#207.1.1.ctx.func
GC: --#214.1.1.ctx.func
GC: --#207.1.2.ctx.func
GC: --#212.1.2.mem.code.ro
GC: --#215.1.1.hash
GC: --#213.1.2.hash
== backtrace ==
  [0] #207.1.1.ctx.func <code #205.1.5.mem.ro, ip 0x31 (0x2e), dict #8.1.2.hash>
== stack (#206.1.1.array) ==
  [0] #217.1.1.num.int <30 (0x1e)>
  [1] #210.1.2.num.int <10 (0xa)>
