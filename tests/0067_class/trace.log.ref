# ---  trace  ---
IP: #186:0x0, type 5, 1[7]
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.1.mem.ro, ip 0x8 (0x0), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x8, type 9, 9[5]
GC: ++#186.1.1.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.2.mem.ro, ip 0xe (0x8), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #189.1.1.mem.ref.ro <#186.1.2.mem.ro, ofs 0x9, size 5, "class">
IP: #186:0xe, type 6, 16[43]
GC: ++#186.1.2.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x3b (0xe), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #190.1.1.mem.code.ro <#186.1.3.mem.ro, ofs 0x10, size 43>
  [1] #189.1.1.mem.ref.ro <#186.1.3.mem.ro, ofs 0x9, size 5, "class">
IP: #186:0x3b, type 8, 60[3]
GC: ++#189.1.1.mem.ref.ro
GC: ++#190.1.1.mem.code.ro
GC: --#190.1.2.mem.code.ro
GC: --#189.1.2.mem.ref.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x3f (0x3b), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x3f, type 8, 64[9]
GC: ++#2.1.1.gstate
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x49 (0x3f), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #2.1.2.gstate <region 0x0_800x600>
IP: #186:0x49, type 8, 75[16]
GC: ++#3.1.1.gstate
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x5b (0x49), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #3.1.2.gstate <region 80x100_640x400>
  [1] #2.1.2.gstate <region 0x0_800x600>
IP: #186:0x5b, type 8, 92[7]
GC: --#3.1.2.gstate
GC: ++#184.1.1.font
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x63 (0x5b), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #184.1.2.font <glyphs 256, size 8x16, line height 16>
  [1] #2.1.2.gstate <region 0x0_800x600>
IP: #186:0x63, type 8, 100[7]
GC: ++#184.1.2.font
GC: --#184.1.3.font
GC: --#2.1.2.gstate
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.3.mem.ro, ip 0x6b (0x63), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x6b, type 9, 108[6]
GC: ++#186.1.3.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.4.mem.ro, ip 0x72 (0x6b), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #191.1.1.mem.ref.ro <#186.1.4.mem.ro, ofs 0x6c, size 6, "widget">
IP: #186:0x72, type 8, 115[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.4.mem.ro, ip 0x74 (0x72), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #191.1.1.mem.ref.ro <#186.1.4.mem.ro, ofs 0x6c, size 6, "widget">
IP: #186:0x74, type 9, 117[5]
GC: ++#186.1.4.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.5.mem.ro, ip 0x7a (0x74), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #192.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0x75, size 5, "draw1">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #191.1.1.mem.ref.ro <#186.1.5.mem.ro, ofs 0x6c, size 6, "widget">
IP: #186:0x7a, type 6, 124[22]
GC: ++#186.1.5.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.6.mem.ro, ip 0x92 (0x7a), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #193.1.1.mem.code.ro <#186.1.6.mem.ro, ofs 0x7c, size 22>
  [1] #192.1.1.mem.ref.ro <#186.1.6.mem.ro, ofs 0x75, size 5, "draw1">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #191.1.1.mem.ref.ro <#186.1.6.mem.ro, ofs 0x6c, size 6, "widget">
IP: #186:0x92, type 8, 147[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.6.mem.ro, ip 0x94 (0x92), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.1.hash <size 1, max 1>
  [1] #191.1.1.mem.ref.ro <#186.1.6.mem.ro, ofs 0x6c, size 6, "widget">
IP: #186:0x94, type 8, 149[3]
GC: ++#191.1.1.mem.ref.ro
GC: ++#194.1.1.hash
GC: --#194.1.2.hash
GC: --#191.1.2.mem.ref.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.6.mem.ro, ip 0x98 (0x94), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x98, type 9, 153[3]
GC: ++#186.1.6.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.7.mem.ro, ip 0x9c (0x98), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #195.1.1.mem.ref.ro <#186.1.7.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0x9c, type 8, 157[6]
GC: ++#194.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.7.mem.ro, ip 0xa3 (0x9c), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.2.hash <size 1, max 1>
  [1] #195.1.1.mem.ref.ro <#186.1.7.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xa3, type 8, 164[1]
GC: ++#13.1.1.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.7.mem.ro, ip 0xa5 (0xa3), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #13.1.2.num.prim <4 (0x4)>
  [1] #194.1.2.hash <size 1, max 1>
  [2] #195.1.1.mem.ref.ro <#186.1.7.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xa5, type 9, 166[1]
GC: ++#186.1.7.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.8.mem.ro, ip 0xa7 (0xa5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #196.1.1.mem.ref.ro <#186.1.8.mem.ro, ofs 0xa6, size 1, "y">
  [1] #13.1.2.num.prim <4 (0x4)>
  [2] #194.1.2.hash <size 1, max 1>
  [3] #195.1.1.mem.ref.ro <#186.1.8.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xa7, type 1, 20 (0x14)
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.8.mem.ro, ip 0xa9 (0xa7), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #197.1.1.num.int <20 (0x14)>
  [1] #196.1.1.mem.ref.ro <#186.1.8.mem.ro, ofs 0xa6, size 1, "y">
  [2] #13.1.2.num.prim <4 (0x4)>
  [3] #194.1.2.hash <size 1, max 1>
  [4] #195.1.1.mem.ref.ro <#186.1.8.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xa9, type 9, 170[4]
GC: ++#186.1.8.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.9.mem.ro, ip 0xae (0xa9), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #198.1.1.mem.ref.ro <#186.1.9.mem.ro, ofs 0xaa, size 4, "text">
  [1] #197.1.1.num.int <20 (0x14)>
  [2] #196.1.1.mem.ref.ro <#186.1.9.mem.ro, ofs 0xa6, size 1, "y">
  [3] #13.1.2.num.prim <4 (0x4)>
  [4] #194.1.2.hash <size 1, max 1>
  [5] #195.1.1.mem.ref.ro <#186.1.9.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xae, type 7, 175[2]
GC: ++#186.1.9.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.10.mem.ro, ip 0xb1 (0xae), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #199.1.1.mem.str.ro <#186.1.10.mem.ro, ofs 0xaf, size 2, "XX">
  [1] #198.1.1.mem.ref.ro <#186.1.10.mem.ro, ofs 0xaa, size 4, "text">
  [2] #197.1.1.num.int <20 (0x14)>
  [3] #196.1.1.mem.ref.ro <#186.1.10.mem.ro, ofs 0xa6, size 1, "y">
  [4] #13.1.2.num.prim <4 (0x4)>
  [5] #194.1.2.hash <size 1, max 1>
  [6] #195.1.1.mem.ref.ro <#186.1.10.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xb1, type 9, 178[5]
GC: ++#186.1.10.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0xb7 (0xb1), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #200.1.1.mem.ref.ro <#186.1.11.mem.ro, ofs 0xb2, size 5, "draw2">
  [1] #199.1.1.mem.str.ro <#186.1.11.mem.ro, ofs 0xaf, size 2, "XX">
  [2] #198.1.1.mem.ref.ro <#186.1.11.mem.ro, ofs 0xaa, size 4, "text">
  [3] #197.1.1.num.int <20 (0x14)>
  [4] #196.1.1.mem.ref.ro <#186.1.11.mem.ro, ofs 0xa6, size 1, "y">
  [5] #13.1.2.num.prim <4 (0x4)>
  [6] #194.1.2.hash <size 1, max 1>
  [7] #195.1.1.mem.ref.ro <#186.1.11.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xb7, type 6, 185[58]
GC: ++#186.1.11.mem.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xf3 (0xb7), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #201.1.1.mem.code.ro <#186.1.12.mem.ro, ofs 0xb9, size 58>
  [1] #200.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xb2, size 5, "draw2">
  [2] #199.1.1.mem.str.ro <#186.1.12.mem.ro, ofs 0xaf, size 2, "XX">
  [3] #198.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xaa, size 4, "text">
  [4] #197.1.1.num.int <20 (0x14)>
  [5] #196.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xa6, size 1, "y">
  [6] #13.1.2.num.prim <4 (0x4)>
  [7] #194.1.2.hash <size 1, max 1>
  [8] #195.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xf3, type 8, 244[1]
GC: --#13.1.2.num.prim
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xf5 (0xf3), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.1.hash <size 3, max 3>
  [1] #194.1.2.hash <size 1, max 1>
  [2] #195.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #186:0xf5, type 8, 246[5]
GC: ++#190.1.1.mem.code.ro
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x0 (0x0)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.1.hash <size 3, max 3>
  [1] #194.1.2.hash <size 1, max 1>
  [2] #195.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #190:0x0, type 1, 2 (0x2)
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x1 (0x0)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #204.1.1.num.int <2 (0x2)>
  [1] #202.1.1.hash <size 3, max 3>
  [2] #194.1.2.hash <size 1, max 1>
  [3] #195.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #190:0x1, type 8, 2[5]
GC: --#204.1.1.num.int
GC: ++#195.1.1.mem.ref.ro
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x7 (0x1)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
  [1] #202.1.1.hash <size 3, max 3>
  [2] #194.1.2.hash <size 1, max 1>
  [3] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #190:0x7, type 8, 8[4]
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0xc (0x7)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.1.hash <size 3, max 3>
  [1] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
  [2] #194.1.2.hash <size 1, max 1>
  [3] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #190:0xc, type 8, 13[4]
GC: ++#195.1.2.mem.ref.ro
GC: ++#202.1.1.hash
GC: --#202.1.2.hash
GC: --#195.1.3.mem.ref.ro
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x11 (0xc)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.2.hash <size 1, max 1>
  [1] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
IP: #190:0x11, type 8, 18[4]
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x16 (0x11)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #195.1.2.mem.ref.ro <#186.1.12.mem.ro, ofs 0x99, size 3, "win">
  [1] #194.1.2.hash <size 1, max 1>
IP: #190:0x16, type 8, 23[4]
GC: ++#202.1.1.hash
GC: --#195.1.2.mem.ref.ro
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x1b (0x16)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.2.hash <size 3, max 3>
  [1] #194.1.2.hash <size 1, max 1>
IP: #190:0x1b, type 8, 28[4]
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x20 (0x1b)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #194.1.2.hash <size 1, max 1>
  [1] #202.1.2.hash <size 3, max 3>
IP: #190:0x20, type 8, 33[9]
GC: ++#194.1.2.hash
GC: --#194.1.3.hash
GC: --#202.1.2.hash
== backtrace ==
  [0] #203.1.1.ctx.func <code #190.1.2.mem.code.ro, ip 0x2a (0x20)>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #190:0x2a, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#203.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#190.1.2.mem.code.ro
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xfb (0xf5), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0xfb, type 8, 252[3]
GC: ++#202.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0xff (0xfb), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.2.hash <size 3, max 3, parent #194.1.2.hash>
IP: #186:0xff, type 10, 256[5]
GC: ++#201.1.1.mem.code.ro
GC: ++#202.1.2.hash
GC: --#202.1.3.hash
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x0 (0x0), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x0, type 1, 10 (0xa)
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2 (0x0), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #208.1.1.num.int <10 (0xa)>
IP: #201:0x2, type 8, 3[1]
GC: ++#197.1.1.num.int
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x4 (0x2), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #197.1.2.num.int <20 (0x14)>
  [1] #208.1.1.num.int <10 (0xa)>
IP: #201:0x4, type 8, 5[6]
GC: --#197.1.2.num.int
GC: --#208.1.1.num.int
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0xb (0x4), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0xb, type 8, 12[4]
GC: ++#199.1.1.mem.str.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x10 (0xb), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #199.1.2.mem.str.ro <#186.1.12.mem.ro, ofs 0xaf, size 2, "XX">
IP: #201:0x10, type 8, 17[4]
GC: --#199.1.2.mem.str.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x15 (0x10), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x15, type 9, 22[1]
GC: ++#186.1.12.mem.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x17 (0x15), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #209.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x17, type 8, 24[1]
GC: ++#197.1.1.num.int
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x19 (0x17), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #197.1.2.num.int <20 (0x14)>
  [1] #209.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x19, type 1, 20 (0x14)
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1b (0x19), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #210.1.1.num.int <20 (0x14)>
  [1] #197.1.2.num.int <20 (0x14)>
  [2] #209.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1b, type 8, 28[3]
GC: --#210.1.1.num.int
GC: --#197.1.2.num.int
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1f (0x1b), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #211.1.1.num.int <40 (0x28)>
  [1] #209.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1f, type 8, 32[3]
GC: ++#209.1.1.mem.ref.ro
GC: ++#211.1.1.num.int
GC: --#196.1.1.mem.ref.ro
GC: --#186.1.13.mem.ro
GC: --#197.1.1.num.int
GC: --#211.1.2.num.int
GC: --#209.1.2.mem.ref.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x23 (0x1f), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x23, type 9, 36[4]
GC: ++#186.1.12.mem.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x28 (0x23), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #212.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x28, type 8, 41[4]
GC: ++#199.1.1.mem.str.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2d (0x28), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #199.1.2.mem.str.ro <#186.1.13.mem.ro, ofs 0xaf, size 2, "XX">
  [1] #212.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x2d, type 7, 46[3]
GC: ++#186.1.13.mem.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x31 (0x2d), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.14.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #213.1.1.mem.str.ro <#186.1.14.mem.ro, ofs 0xe7, size 3, " XX">
  [1] #199.1.2.mem.str.ro <#186.1.14.mem.ro, ofs 0xaf, size 2, "XX">
  [2] #212.1.1.mem.ref.ro <#186.1.14.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x31, type 8, 50[3]
GC: --#213.1.1.mem.str.ro
GC: --#186.1.14.mem.ro
GC: --#199.1.2.mem.str.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x35 (0x31), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #214.1.1.mem.str <size 5, "XX XX">
  [1] #212.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x35, type 8, 54[3]
GC: ++#212.1.1.mem.ref.ro
GC: ++#214.1.1.mem.str
GC: --#198.1.1.mem.ref.ro
GC: --#186.1.13.mem.ro
GC: --#199.1.1.mem.str.ro
GC: --#186.1.12.mem.ro
GC: --#214.1.2.mem.str
GC: --#212.1.2.mem.ref.ro
== backtrace ==
  [0] #206.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x39 (0x35), dict #207.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x39, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#206.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#201.1.2.mem.code.ro
GC: --#207.1.1.hash
GC: --#202.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x105 (0xff), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x105, type 8, 262[3]
GC: ++#202.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x109 (0x105), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.2.hash <size 3, max 3, parent #194.1.2.hash>
IP: #186:0x109, type 10, 266[5]
GC: ++#201.1.1.mem.code.ro
GC: ++#202.1.2.hash
GC: --#202.1.3.hash
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x0 (0x0), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x0, type 1, 10 (0xa)
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2 (0x0), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #217.1.1.num.int <10 (0xa)>
IP: #201:0x2, type 8, 3[1]
GC: ++#211.1.1.num.int
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x4 (0x2), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #211.1.2.num.int <40 (0x28)>
  [1] #217.1.1.num.int <10 (0xa)>
IP: #201:0x4, type 8, 5[6]
GC: --#211.1.2.num.int
GC: --#217.1.1.num.int
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0xb (0x4), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0xb, type 8, 12[4]
GC: ++#214.1.1.mem.str
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x10 (0xb), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #214.1.2.mem.str <size 5, "XX XX">
IP: #201:0x10, type 8, 17[4]
GC: --#214.1.2.mem.str
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x15 (0x10), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x15, type 9, 22[1]
GC: ++#186.1.11.mem.ro
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x17 (0x15), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #218.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x17, type 8, 24[1]
GC: ++#211.1.1.num.int
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x19 (0x17), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #211.1.2.num.int <40 (0x28)>
  [1] #218.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x19, type 1, 20 (0x14)
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1b (0x19), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #219.1.1.num.int <20 (0x14)>
  [1] #211.1.2.num.int <40 (0x28)>
  [2] #218.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1b, type 8, 28[3]
GC: --#219.1.1.num.int
GC: --#211.1.2.num.int
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1f (0x1b), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #220.1.1.num.int <60 (0x3c)>
  [1] #218.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1f, type 8, 32[3]
GC: ++#218.1.1.mem.ref.ro
GC: ++#220.1.1.num.int
GC: --#209.1.1.mem.ref.ro
GC: --#186.1.12.mem.ro
GC: --#211.1.1.num.int
GC: --#220.1.2.num.int
GC: --#218.1.2.mem.ref.ro
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x23 (0x1f), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x23, type 9, 36[4]
GC: ++#186.1.11.mem.ro
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x28 (0x23), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #221.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x28, type 8, 41[4]
GC: ++#214.1.1.mem.str
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2d (0x28), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #214.1.2.mem.str <size 5, "XX XX">
  [1] #221.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x2d, type 7, 46[3]
GC: ++#186.1.12.mem.ro
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x31 (0x2d), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #222.1.1.mem.str.ro <#186.1.13.mem.ro, ofs 0xe7, size 3, " XX">
  [1] #214.1.2.mem.str <size 5, "XX XX">
  [2] #221.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x31, type 8, 50[3]
GC: --#222.1.1.mem.str.ro
GC: --#186.1.13.mem.ro
GC: --#214.1.2.mem.str
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x35 (0x31), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #223.1.1.mem.str <size 8, "XX XX XX">
  [1] #221.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x35, type 8, 54[3]
GC: ++#221.1.1.mem.ref.ro
GC: ++#223.1.1.mem.str
GC: --#212.1.1.mem.ref.ro
GC: --#186.1.12.mem.ro
GC: --#214.1.1.mem.str
GC: --#223.1.2.mem.str
GC: --#221.1.2.mem.ref.ro
== backtrace ==
  [0] #215.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x39 (0x35), dict #216.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x39, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#215.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#201.1.2.mem.code.ro
GC: --#216.1.1.hash
GC: --#202.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x10f (0x109), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x10f, type 8, 272[3]
GC: ++#202.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x113 (0x10f), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.2.hash <size 3, max 3, parent #194.1.2.hash>
IP: #186:0x113, type 10, 276[5]
GC: ++#201.1.1.mem.code.ro
GC: ++#202.1.2.hash
GC: --#202.1.3.hash
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x0 (0x0), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x0, type 1, 10 (0xa)
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2 (0x0), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #226.1.1.num.int <10 (0xa)>
IP: #201:0x2, type 8, 3[1]
GC: ++#220.1.1.num.int
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x4 (0x2), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #220.1.2.num.int <60 (0x3c)>
  [1] #226.1.1.num.int <10 (0xa)>
IP: #201:0x4, type 8, 5[6]
GC: --#220.1.2.num.int
GC: --#226.1.1.num.int
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0xb (0x4), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0xb, type 8, 12[4]
GC: ++#223.1.1.mem.str
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x10 (0xb), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #223.1.2.mem.str <size 8, "XX XX XX">
IP: #201:0x10, type 8, 17[4]
GC: --#223.1.2.mem.str
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x15 (0x10), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x15, type 9, 22[1]
GC: ++#186.1.11.mem.ro
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x17 (0x15), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #227.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x17, type 8, 24[1]
GC: ++#220.1.1.num.int
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x19 (0x17), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #220.1.2.num.int <60 (0x3c)>
  [1] #227.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x19, type 1, 20 (0x14)
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1b (0x19), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #228.1.1.num.int <20 (0x14)>
  [1] #220.1.2.num.int <60 (0x3c)>
  [2] #227.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1b, type 8, 28[3]
GC: --#228.1.1.num.int
GC: --#220.1.2.num.int
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x1f (0x1b), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #229.1.1.num.int <80 (0x50)>
  [1] #227.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xcf, size 1, "y">
IP: #201:0x1f, type 8, 32[3]
GC: ++#227.1.1.mem.ref.ro
GC: ++#229.1.1.num.int
GC: --#218.1.1.mem.ref.ro
GC: --#186.1.12.mem.ro
GC: --#220.1.1.num.int
GC: --#229.1.2.num.int
GC: --#227.1.2.mem.ref.ro
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x23 (0x1f), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x23, type 9, 36[4]
GC: ++#186.1.11.mem.ro
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x28 (0x23), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #230.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x28, type 8, 41[4]
GC: ++#223.1.1.mem.str
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x2d (0x28), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #223.1.2.mem.str <size 8, "XX XX XX">
  [1] #230.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x2d, type 7, 46[3]
GC: ++#186.1.12.mem.ro
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x31 (0x2d), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.13.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #231.1.1.mem.str.ro <#186.1.13.mem.ro, ofs 0xe7, size 3, " XX">
  [1] #223.1.2.mem.str <size 8, "XX XX XX">
  [2] #230.1.1.mem.ref.ro <#186.1.13.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x31, type 8, 50[3]
GC: --#231.1.1.mem.str.ro
GC: --#186.1.13.mem.ro
GC: --#223.1.2.mem.str
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x35 (0x31), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.12.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #232.1.1.mem.str <size 11, "XX XX XX XX">
  [1] #230.1.1.mem.ref.ro <#186.1.12.mem.ro, ofs 0xdd, size 4, "text">
IP: #201:0x35, type 8, 54[3]
GC: ++#230.1.1.mem.ref.ro
GC: ++#232.1.1.mem.str
GC: --#221.1.1.mem.ref.ro
GC: --#186.1.12.mem.ro
GC: --#223.1.1.mem.str
GC: --#232.1.2.mem.str
GC: --#230.1.2.mem.ref.ro
== backtrace ==
  [0] #224.1.1.ctx.func <code #201.1.2.mem.code.ro, ip 0x39 (0x35), dict #225.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #201:0x39, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#224.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#201.1.2.mem.code.ro
GC: --#225.1.1.hash
GC: --#202.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x119 (0x113), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #186:0x119, type 8, 282[3]
GC: ++#202.1.1.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x11d (0x119), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #202.1.2.hash <size 3, max 3, parent #194.1.2.hash>
IP: #186:0x11d, type 10, 286[5]
GC: ++#193.1.1.mem.code.ro
GC: ++#202.1.2.hash
GC: --#202.1.3.hash
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x0 (0x0), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #193:0x0, type 1, 10 (0xa)
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x2 (0x0), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #235.1.1.num.int <10 (0xa)>
IP: #193:0x2, type 8, 3[1]
GC: ++#229.1.1.num.int
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x4 (0x2), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #229.1.2.num.int <80 (0x50)>
  [1] #235.1.1.num.int <10 (0xa)>
IP: #193:0x4, type 8, 5[6]
GC: --#229.1.2.num.int
GC: --#235.1.1.num.int
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0xb (0x4), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #193:0xb, type 8, 12[4]
GC: ++#232.1.1.mem.str
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x10 (0xb), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
  [0] #232.1.2.mem.str <size 11, "XX XX XX XX">
IP: #193:0x10, type 8, 17[4]
GC: --#232.1.2.mem.str
== backtrace ==
  [0] #233.1.1.ctx.func <code #193.1.2.mem.code.ro, ip 0x15 (0x10), dict #234.1.1.hash>
  [1] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
IP: #193:0x15, type 3, 1 (0x1)
GC: ++#188.1.1.ctx.func
GC: --#233.1.1.ctx.func
GC: --#188.1.2.ctx.func
GC: --#193.1.2.mem.code.ro
GC: --#234.1.1.hash
GC: --#202.1.2.hash
== backtrace ==
  [0] #188.1.1.ctx.func <code #186.1.11.mem.ro, ip 0x123 (0x11d), dict #4.1.2.hash>
== stack (#187.1.1.array) ==
