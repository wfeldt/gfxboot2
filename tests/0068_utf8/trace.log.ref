# ---  trace  ---
IP: #203:0x0, type 5, 1[7]
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.1.mem.ro, ip 0x8 (0x0), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
IP: #203:0x8, type 9, 9[1]
GC: ++#203.1.1.mem.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.2.mem.ro, ip 0xa (0x8), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #206.1.1.mem.ref.ro <#203.1.2.mem.ro, ofs 0x9, size 1, "s">
IP: #203:0xa, type 7, 12[19]
GC: ++#203.1.2.mem.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.3.mem.ro, ip 0x1f (0xa), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #207.1.1.mem.str.ro <#203.1.3.mem.ro, ofs 0xc, size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
  [1] #206.1.1.mem.ref.ro <#203.1.3.mem.ro, ofs 0x9, size 1, "s">
IP: #203:0x1f, type 8, 32[3]
GC: ++#206.1.1.mem.ref.ro
GC: ++#207.1.1.mem.str.ro
GC: --#207.1.2.mem.str.ro
GC: --#206.1.2.mem.ref.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.3.mem.ro, ip 0x23 (0x1f), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
IP: #203:0x23, type 9, 36[1]
GC: ++#203.1.3.mem.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.4.mem.ro, ip 0x25 (0x23), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #208.1.1.mem.ref.ro <#203.1.4.mem.ro, ofs 0x24, size 1, "a">
IP: #203:0x25, type 8, 38[1]
GC: ++#207.1.1.mem.str.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.4.mem.ro, ip 0x27 (0x25), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #207.1.2.mem.str.ro <#203.1.4.mem.ro, ofs 0xc, size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
  [1] #208.1.1.mem.ref.ro <#203.1.4.mem.ro, ofs 0x24, size 1, "a">
IP: #203:0x27, type 8, 40[10]
GC: --#207.1.2.mem.str.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.4.mem.ro, ip 0x32 (0x27), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #209.1.1.array <size 15, max 15>
  [1] #208.1.1.mem.ref.ro <#203.1.4.mem.ro, ofs 0x24, size 1, "a">
IP: #203:0x32, type 8, 51[3]
GC: ++#208.1.1.mem.ref.ro
GC: ++#209.1.1.array
GC: --#209.1.2.array
GC: --#208.1.2.mem.ref.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.4.mem.ro, ip 0x36 (0x32), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
IP: #203:0x36, type 9, 55[1]
GC: ++#203.1.4.mem.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x38 (0x36), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #225.1.1.mem.ref.ro <#203.1.5.mem.ro, ofs 0x37, size 1, "e">
IP: #203:0x38, type 8, 57[1]
GC: ++#209.1.1.array
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x3a (0x38), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #209.1.2.array <size 15, max 15>
  [1] #225.1.1.mem.ref.ro <#203.1.5.mem.ro, ofs 0x37, size 1, "e">
IP: #203:0x3a, type 8, 59[10]
GC: --#209.1.2.array
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x45 (0x3a), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #226.1.1.mem.str <size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
  [1] #225.1.1.mem.ref.ro <#203.1.5.mem.ro, ofs 0x37, size 1, "e">
IP: #203:0x45, type 8, 70[3]
GC: ++#225.1.1.mem.ref.ro
GC: ++#226.1.1.mem.str
GC: --#226.1.2.mem.str
GC: --#225.1.2.mem.ref.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x49 (0x45), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
IP: #203:0x49, type 8, 74[1]
GC: ++#226.1.1.mem.str
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x4b (0x49), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #226.1.2.mem.str <size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
IP: #203:0x4b, type 8, 76[1]
GC: ++#207.1.1.mem.str.ro
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x4d (0x4b), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #207.1.2.mem.str.ro <#203.1.5.mem.ro, ofs 0xc, size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
  [1] #226.1.2.mem.str <size 19, "ab   cd   Ã¶Ã¤ â‚¬ ">
IP: #203:0x4d, type 8, 78[2]
GC: --#207.1.2.mem.str.ro
GC: --#226.1.2.mem.str
== backtrace ==
  [0] #205.1.1.ctx.func <code #203.1.5.mem.ro, ip 0x50 (0x4d), dict #8.1.2.hash>
== stack (#204.1.1.array) ==
  [0] #227.1.1.num.bool <1 (0x1)>
